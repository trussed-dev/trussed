window.SIDEBAR_ITEMS = {"macro":[["impl_simple_block_encdec","Implement simple block backend"]],"mod":[["consts","Type aliases for many constants."]],"struct":[["InvalidLength","The error type returned when key and/or IV used in the [`KeyInit`], [`KeyIvInit`], and [`InnerIvInit`] slice-based methods had an invalid length."],["OverflowError","The error type returned when a cipher position can not be represented by the requested type."],["StreamCipherCoreWrapper","Wrapper around [`StreamCipherCore`] implementations."],["StreamCipherError","This error is returned by the [`StreamCipher`][crate::stream::StreamCipher] trait methods."]],"trait":[["AlgorithmName","Trait which stores algorithm name constant, used in `Debug` implementations."],["ArrayLength","Trait making `GenericArray` work, marking types to be used as length of an array"],["AsyncStreamCipher","Marker trait for block-level asynchronous stream ciphers"],["BlockBackend","Trait implemented by block cipher encryption and decryption backends."],["BlockCipher","Marker trait for block ciphers."],["BlockClosure","Trait for [`BlockBackend`] users."],["BlockDecrypt","Decrypt-only functionality for block ciphers."],["BlockDecryptMut","Decrypt-only functionality for block ciphers and modes with mutable access to `self`."],["BlockEncrypt","Encrypt-only functionality for block ciphers."],["BlockEncryptMut","Encrypt-only functionality for block ciphers and modes with mutable access to `self`."],["BlockSizeUser","Types which process data in blocks."],["Counter","Counter type usable with [`StreamCipherCore`]."],["InnerIvInit","Types which can be initialized from another type and additional initialization vector/nonce."],["IvSizeUser","Types which use initialization vector (nonce) for initialization."],["IvState","Trait for loading current IV state."],["KeyInit","Types which can be initialized from key."],["KeyIvInit","Types which can be initialized from key and initialization vector (nonce)."],["KeySizeUser","Types which use key for initialization."],["ParBlocksSizeUser","Types which can process blocks in parallel."],["SeekNum","Trait implemented for numeric types which can be used with the [`StreamCipherSeek`] trait."],["StreamBackend","Trait implemented by stream cipher backends."],["StreamCipher","Synchronous stream cipher core trait."],["StreamCipherCore","Block-level synchronous stream ciphers."],["StreamCipherSeek","Trait for seekable stream ciphers."],["StreamCipherSeekCore","Block-level seeking trait for stream ciphers."],["StreamClosure","Trait for [`StreamBackend`] users."],["Unsigned","The marker trait for compile time unsigned integers."]],"type":[["Block","Block on which [`BlockSizeUser`] implementors operate."],["Iv","Initialization vector (nonce) used by [`IvSizeUser`] implementors."],["Key","Key used by [`KeySizeUser`] implementors."],["ParBlocks","Parallel blocks on which [`ParBlocksSizeUser`] implementors operate."]]};