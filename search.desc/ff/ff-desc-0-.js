searchState.loadedDescShard("ff", 0, "This crate provides traits for working with finite fields.\nA non-allocating batch inverter.\nHow many bits of information can be reliably stored in the …\nThis trait represents an element of a field.\nHow many bits are needed to represent an element of this …\nThis represents an element of a prime field.\nThe prime field can be converted back and forth into this …\nAn integer <code>s</code> satisfying the equation <code>2^s * t = modulus - 1</code> …\nCalculate a + b + carry, returning the sum and modifying …\nCubes this element.\nDoubles this element.\nReturns the argument unchanged.\nAttempts to convert a byte representation of a field …\nInterpret a string of numbers as a (congruent) prime field …\nCalls <code>U::from(self)</code>.\nComputes the multiplicative inverse of this element, …\nInverts each field element in <code>elements</code> (when nonzero). …\nInverts each field element in <code>items</code> (when nonzero). …\nReturns true iff this element is even.\nReturns true iff this element is odd.\nReturns true iff this element is zero.\nCalculate a + (b * c) + carry, returning the least …\nReturns a fixed multiplicative generator of <code>modulus - 1</code> …\nReturns the one element of the field, the multiplicative …\nExponentiates <code>self</code> by <code>exp</code>, where <code>exp</code> is a little-endian …\nReturns an element chosen uniformly at random using a …\nReturns the <code>2^s</code> root of unity.\nCalculate a - b - borrow, returning the result and …\nReturns the square root of the field element, if it is …\nSquares this element.\nConverts an element of the prime field into the standard …\nReturns the zero element of the field, the additive …")