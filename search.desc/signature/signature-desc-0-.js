searchState.loadedDescShard("signature", 0, "RustCrypto: Digital Signature Algorithms\nContains the error value\nSignature errors.\nSigning keypair with an associated verifying key.\nSigning keypair with an associated verifying key.\nContains the success value\nByte representation of a signature.\nResult type.\nSupport for decoding/encoding signatures as bytes.\nSign the provided message bytestring using <code>Self</code> (e.g. a …\nSign the provided message bytestring using <code>&amp;mut Self</code> (e.g. …\nVerify the provided message bytestring using <code>Self</code> (e.g. a …\nVerifying key type for this keypair.\nVerifying key type for this keypair.\nGet the length of this signature when encoded.\nGet the length of this signature when encoded.\nReturns the argument unchanged.\nHazardous Materials: low-level APIs which can be insecure …\nCalls <code>U::from(self)</code>.\nCreate a new error with no associated source\nSign the given message and return a digital signature\nSign the given message and return a digital signature\nSign the given message, update the state, and return a …\nSign the given message, update the state, and return a …\nEncode signature as its byte representation.\nEncode signature as its byte representation.\nAttempt to sign the given message, returning a digital …\nAttempt to sign the given message, updating the state, and …\nUse <code>Self</code> to verify that the provided signature for a given …\nGet the verifying key which can verify signatures produced …\nSign the provided message prehash, returning a digital …\nVerify the provided message prehash using <code>Self</code> (e.g. a …\nAttempt to sign the given message digest, returning a …\nUse <code>Self</code> to verify that the provided signature for a given …")