searchState.loadedDescShard("universal_hash", 0, "Traits for Universal Hash Functions.\nBlock on which <code>BlockSizeUser</code> implementors operate.\nError type used by the <code>UniversalHash::verify</code> method to …\nKey used by <code>KeySizeUser</code> implementors.\nTypes which can be initialized from key.\nParallel blocks on which <code>ParBlocksSizeUser</code> implementors …\nResettable types.\nTrait implemented by UHF backends.\nTrait for <code>UhfBackend</code> users.\nThe <code>UniversalHash</code> trait defines a generic interface for …\nReturns the number of blocks that should be passed to …\nExecute closure with the provided UHF backend.\nType aliases for many constants.\nRetrieve result and consume hasher instance.\nObtain the [<code>Output</code>] of a <code>UniversalHash</code> computation and …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate new value from fixed size key.\nCreate new value from variable size key.\nProcess single block.\nProcess several blocks in parallel.\nReset state to its initial value.\nUpdate hash function state with the provided block.\nInput data into the universal hash function. If the length …\nUpdate hash function state using the provided rank-2 …\nVerify the <code>UniversalHash</code> of the processed input matches a …\nThe type-level bit 0.\nThe type-level bit 1.\nThe type-level signed integer 0.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInstantiates a singleton representing this bit.\nInstantiates a singleton representing this bit.\nInstantiates a singleton representing the integer 0.")