searchState.loadedDescShard("p256_cortex_m4", 0, "Idiomatic Rust bindings for <code>P256-Cortex-M4</code> in the spirit …\nContains the error value\nErrors.\nNIST P-256 keypair.\nContains the success value\nNIST P-256 public key.\nResult type.\nNIST P-256 secret key.\nOutcome of ECDH key agreement.\nNIST P-256 signature.\nECDH key agreement.\nThe secret (big-endian x-coordinate)\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nVerifies that there are 32 bytes that correspond to a …\nDecode <code>PublicKey</code> (compressed or uncompressed) from the …\nDecode signature from SEC1 ASN.1 DER\nDecode assuming <code>bytes</code> is x-coordinate then y-coordinate, …\nDecode signature as big-endian r, then big-endian s, …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPublic key of the keypair\nCalculate associated public key.\nBig-endian representation of r.\nGenerate a random <code>SecretKey</code>.\nGenerate a random <code>Keypair</code>.\nBig-endian representation of s.\nSecret key of the keypair\nConvenience function, calculates SHA256 hash digest of a …\nDeterministic signature on message, which is hashed with …\nAttempt at unraveling the traits in <code>p256</code>.\nReturn secret scalar as big-endian integer.\nCompressed encoding: <code>02 || Px</code> if Py is even and <code>03 || Px</code> …\nEncode signature as SEC1 ASN.1 DER\nUncompressed encoding: <code>04 || Px || Py</code>.\nRaw encoding, x-coordinate then y-coordinate.\nEncode signature from big-endian r, then big-endian s, …\nVerify signature on message, which is hashed with SHA-256 …\nVerify signature on message assumed to be hashed, if …\nBig-endian representation of x-coordinate.\nBig-endian representation of x-coordinate.")