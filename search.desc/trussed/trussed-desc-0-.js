searchState.loadedDescShard("trussed", 0, "Trussed\nSet of <code>N</code> channels\nThe trait that platforms need to implement to use Trussed.\nThis (incomplete!) API loosely follows PKCS#11 v3.\nReturns a reference to the interchange with the <code>N</code> …\nReturns a mutable slice view.\nReturns an immutable slice view.\nCustom backends that can override core request …\nClaim one of the channels of the interchange. Returns None …\nClient interface for applications.\nWrap existing bytes in a <code>Bytes&lt;N&gt;</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUnwraps the Vec&lt;u8, N&gt;, same as <code>into_vec</code>.\nUnwraps the Vec&lt;u8, N&gt;, same as <code>into_inner</code>.\nConstruct a new, empty <code>Bytes&lt;N&gt;</code>.\nCreate a new Interchange\nTrait for platforms to implement that use Trussed.\n<code>store</code> presents a combined interface to three littlefs2 …\nFallible conversion into differently sized byte buffer.\nLow-noise conversion between lengths.\nSome APIs offer an interface of the form …\nStart iteration at an exact match with the provided …\nStart iteration at the first path that is “after” the …\nStart iteration at the beginning of the directory\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA custom backend that can override the core request …\nThe ID of a backend.\nThe ID type for the custom backends used by this dispatch …\nThe context for requests handled by this backend.\nThe context type used by this dispatch.\nAlways dispatches to the Trussed core backend.\nDispatches requests to custom backends.\nAn empty ID type.\nHelper type for optional backends.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a mutable reference to the wrapped backend or …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the wrapped backend.\nCrates a new optional backend from an <code>Option&lt;T&gt;</code>.\nExecutes a request using this backend or returns …\nExecutes a request using a backend or returns …\nRead/Write + Delete certificates\nAll-in-one trait bounding on the sub-traits.\nBuilder for <code>ClientImplementation</code>.\nThe client implementation client applications actually …\nCreate counters, increment existing counters.\nTrussed Client interface that Trussed apps can rely on.\nContains the error value\nRead/Write/Delete files, iterate over directories.\nAll the other methods that are fit to expose.\nContains the success value\nLowest level interface, use one of the higher level ones.\nAn intermediate step of the <code>ClientBuilder</code>.\nUser-interfacing functionality.\nSelects the backends to use for this client.\nBuilds the client using the given syscall implementation.\nClear private data from the key\nSkips deleting read-only / manufacture keys (currently, “…\nFetch the Metadata for a file or directory\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new client builder using the given client ID.\nPrepare a client using the given service.\nOpen a directory for iteration with <code>read_dir_next</code>\nOpen a directory for iteration with <code>read_dir_next</code>\nRename a file or directory.\nCurrently, this writes the cert (assumed but not verified …\nContains the error value\nContains the success value\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAll non-used bits are RFU.\nA key object in Trussed.\nSet if the key has been generated on this device.\nSet if the key is a secret key.\nThis flag currently only applies to <code>kind::Shared</code>\nA key can either be public, of secret.\nsome bytes of entropy, needs a KDF applied, the parameter …\nentropic bytes, suitable for use as symmetric secret …\n32B symmetric key + nonce, the parameter is the length of …\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nThis implements “safe” defaults\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nDecrypts a single block. Let’s hope we don’t have to …\nEncrypts the input <em>with zero IV</em>\nEncrypts a single block. Let’s hope we don’t have to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA marker trait used to indicate that an <code>RngCore</code> or …\nThe core of a random number generator.\nTrussed client will call this method when making a Trussed …\nCheck if the user has indicated their presence so as to …\nFill <code>dest</code> with random data.\nReturn the next random <code>u32</code>.\nReturn the next random <code>u64</code>.\nExit / reset the application\nMay be called during idle periods to give the UI the …\nSet the state of Trussed to give potential feedback to the …\nFill <code>dest</code> entirely with random data.\nReturn the duration since startup.\nTrigger a visible or audible effect for the given duration …\nThe core of a random number generator.\nSeed type, which is restricted to types …\nA random number generator that can be explicitly seeded.\nFill <code>dest</code> with random data.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new PRNG seeded from another <code>Rng</code>.\nCreate a new PRNG using the given seed.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn the next random <code>u32</code>.\nReturn the next random <code>u64</code>.\nGet access to the filestore for the client without the <code>dat</code> …\nApplies a splitting aka forking construction to the inner …\nCreate a new PRNG using a <code>u64</code> seed.\nSpecialization of <code>try_new_client</code>, using <code>self</code>’s …\nFill <code>dest</code> entirely with random data.\nSimilar to try_as_new_client except that the returning …\nAdd a new client, claiming one of the statically configured\nNB: This is not a full INTEGER implementation, needs the …\nEncoded as “YYYYMMDDHHMMSSZ”, encoding takes care of …\nEncode as INTEGER 2\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nObject-safe trait for files.\nObject-safe trait for filesystems.\nObject-safe trait for <code>Storage</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReads contents from path in location of store.\nCreates parent directory if necessary, then writes.\nWrites contents to path in location of store.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nTODO: feels a bit heavy-weight to pass in the …\nTrait intended for use by mechanism implementations.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nClient files are store below <code>/&lt;client_id&gt;/dat/</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a filestore that stores files in …\nCreate a filestore that stores files in …\nIterate over contents of files inside a directory.\nContinuation of <code>read_dir_files_first</code>.\nIterate over entries of a directory (both file and …\nContinue iterating over entries of a directory.\nTrait intended for use by mechanism implementations.\nTODO: This uses the predicate “filename.len() &gt;= 4” Be …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturn Header of key, if it exists\nNumber of erasable blocks. Hence storage capacity is …\nSuggested values are 100-1000, higher is more performant …\nSize of an erasable block in bytes, as unsigned typenum. …\nlittlefs uses a read cache, a write cache, and one cache …\nThe context for a syscall (per client).\nContains the error value\nStruct representing a generic array - <code>GenericArray&lt;T, N&gt;</code> …\nThe ID of a Trussed object.\nSize of the lookahead buffer used by littlefs, measured in …\nUsers of this library provide a “storage driver” by …\nFile type (regular vs directory) and size of a file.\nAn empty struct not storing any data.\nContains the success value\nA path\nAn owned, mutable path\nMinimum size of block read in bytes. Not in superblock\nExposes the Raw RSA encryption/decryption primitive. Be …\nExposes the Raw RSA encryption/decryption primitive. Be …\nExposes the Raw RSA encryption/decryption primitive. Be …\nUsed by backends implementing RSA.\nUsed to serialize the output of a diffie-hellman\nA fixed capacity <code>String</code>\nA fixed capacity <code>Vec</code>\nMinimum size of block write in bytes. Not in superblock\nIterate over the ancestors of the path\nReturns a raw pointer to the vector’s buffer, which may …\nExtracts a mutable slice containing the entire array.\nConverts a <code>String</code> into a mutable string slice.\nReturns a mutable reference to the contents of this <code>String</code>.\nReturns the inner pointer to this C string.\nReturns a raw pointer to the vector’s buffer.\nExtracts a slice containing the entire array.\nExtracts a slice containing the entire vector.\nExtracts a string slice containing the entire string.\nRead attribute.\nAvailable number of unused blocks in the filesystem\nAvailable number of unused bytes in the filesystem\nReturns the maximum number of elements the String can hold\nReturns the maximum number of elements the vector can hold.\nTruncates this <code>String</code>, removing all contents.\nClears the vector, removing all values.\nConstruct a <code>GenericArray</code> from a slice by cloning its …\nCompare the path using their string representation\nCompare the path using their string representation This …\nCreates a new, empty directory at the provided path.\nRecursively create a directory and all of its parent …\nReturns <code>true</code> if <code>needle</code> is a suffix of the Vec.\nErase data from the storage device. Guaranteed to be …\nCheck whether a file or directory exists at a path.\nExtends the vec from an iterator.\nClones and appends all elements in a slice to the <code>Vec</code>.\nGet the name of the file this path points to if it points …\nReturns the argument unchanged.\nConverts mutable slice to a mutable generic array reference\nConverts slice to a generic array reference with inferred …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a from a raw buffer containing a null-terminated …\nCreates a path from a byte buffer.\nCreates a path from a C string.\nCreates a path from a C string without checking the …\nCreates a new <code>GenericArray</code> instance from an iterator with …\nConverts mutable slice to a mutable generic array reference\nConverts slice to a generic array reference with inferred …\nConstructs a new vector with a fixed capacity of <code>N</code> and …\nCreates a path from a string.\nskips leading zeros\nskips leading zeros\nInserts an element at position <code>index</code> within the vector, …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the contents of the vector as an array of length <code>M</code> …\nConverts a <code>String</code> into a byte vector.\nDeconstruct <code>Filesystem</code>, intention is to allow access to …\nReturn true if the path is empty\nReturns true if the vec is empty\nReturns true if the vec is full\nIs a non-random, constructible u8 ID.\nIterate over the components of the path\nCreates an owned <code>PathBuf</code> with <code>path</code> adjoined to <code>self</code>.\nGiven a path, query the filesystem to get information …\nThis API avoids the need for using <code>Allocation</code>.\nMount the filesystem or, if that fails, call <code>f</code> with the …\nConstructs a new, empty <code>String</code> with a fixed capacity of <code>N</code> …\nConstructs a new, empty vector with a fixed capacity of <code>N</code>\nReturns the full path to the file that this entry …\nRemoves the last character from the string buffer and …\nRemoves the last element from a vector and returns it, or …\nRemoves the last element from a vector and returns it\nAppends the given <code>char</code> to the end of this <code>String</code>.\nAppends an <code>item</code> to the back of the collection\nExtends <code>self</code> with <code>path</code>\nAppends a given string slice onto the end of this <code>String</code>.\nAppends an <code>item</code> to the back of the collection\nRead data from the storage device. Guaranteed to be called …\nRead the entire contents of a file into a bytes vector.\nRead a chunk of a file into a bytes vector Returns the …\nReturns a pseudo-iterator over the entries within a …\nRemove a file or directory.\nRemoves and returns the element at position <code>index</code> within …\nRemove attribute.\nRemove a file or directory.\nTODO: This method fails if some <code>println!</code> calls are removed.\nRename or move a file or directory.\nResizes the Vec in-place so that len is equal to new_len.\nResizes the <code>Vec</code> in-place so that <code>len</code> is equal to <code>new_len</code>.\nRetains only the elements specified by the predicate.\nRetains only the elements specified by the predicate, …\nWether a the result of an <code>agree</code> can be serialized with …\nSet attribute.\nForces the length of the vector to <code>new_len</code>.\nReturns <code>true</code> if <code>needle</code> is a prefix of the Vec.\nRemoves an element from the vector and returns it.\nRemoves an element from the vector and returns it.\nTotal number of blocks in the filesystem\nTotal number of bytes in the filesystem\nShortens this <code>String</code> to the specified length.\nShortens the vector, keeping the first <code>len</code> elements and …\nWrite data to the storage device. Guaranteed to be called …\nWrite a slice as the entire contents of a file.\nWrite a slice as a chunk of a file.\nContains the error value\nIf other user consent requests are pending, fail this …\nPending other user consent requests will fail as …\nThere is no user present\nNormal user presence check, currently implemented as “…\nContains the success value\nStrong user intent check, currently implemented as “…\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.")