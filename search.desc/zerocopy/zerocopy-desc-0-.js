searchState.loadedDescShard("zerocopy", 0, "<em>Want to help improve zerocopy? Fill out our user survey!</em>\nTypes that can be viewed as an immutable slice of …\nAnalyzes whether a type is <code>AsBytes</code>.\nA mutable or immutable reference to a byte slice.\nA mutable reference to a byte slice.\nTypes for which any bit pattern is valid.\nAnalyzes whether a type is <code>FromBytes</code>.\nTypes for which a sequence of bytes all set to zero …\nAnalyzes whether a type is <code>FromZeroes</code>.\nA typed reference derived from a byte slice.\nA type with no alignment requirement.\nTypes with no alignment requirement.\nGets the bytes of this value.\nGets the bytes of this value mutably.\nGets a mutable raw pointer to the first byte in the slice.\nGets a raw pointer to the first byte in the slice.\nByte order-aware numeric primitives.\nGets the underlying bytes.\nGets the underlying bytes mutably.\nReturns a mutable reference to the wrapped <code>T</code> without …\nReturns a reference to the wrapped <code>T</code> without checking …\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets a copy of the inner <code>T</code>.\nGets an unaligned mutable raw pointer to the inner <code>T</code>.\nGets an unaligned raw pointer to the inner <code>T</code>.\nIncludes a file and safely transmutes it to a value of an …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes <code>self</code>, returning the inner <code>T</code>.\nConverts this <code>Ref</code> into a mutable reference.\nConverts this <code>Ref</code> into a mutable slice reference.\nConverts this <code>Ref</code> into a reference.\nConverts this <code>Ref</code> into a slice reference.\nInterprets the given <code>bytes</code> as a <code>&amp;mut Self</code> without copying.\nInterprets the prefix of the given <code>bytes</code> as a <code>&amp;mut Self</code> …\nInterprets the suffix of the given <code>bytes</code> as a <code>&amp;mut Self</code> …\nInterprets the given <code>bytes</code> as a <code>&amp;mut [Self]</code> without …\nInterprets the prefix of the given <code>bytes</code> as a <code>&amp;mut [Self]</code> …\nInterprets the suffix of the given <code>bytes</code> as a <code>&amp;mut [Self]</code> …\nConstructs a new <code>Ref</code>.\nConstructs a new <code>Unalign</code>.\nConstructs a new <code>Ref</code> from the prefix of a byte slice.\nConstructs a new <code>Ref</code> from the prefix of a byte slice, …\nConstructs a new <code>Ref</code> from the suffix of a byte slice.\nConstructs a new <code>Ref</code> from the suffix of a byte slice, …\nConstructs a new <code>Ref</code> of a slice type.\nConstructs a new <code>Ref</code> of a slice type from the prefix of a …\nConstructs a new <code>Ref</code> of a slice type from the prefix of a …\nConstructs a new <code>Ref</code> of a slice type from the suffix of a …\nConstructs a new <code>Ref</code> of a slice type from the prefix of a …\nConstructs a new <code>Ref</code> of a slice type with no alignment …\nConstructs a new <code>Ref</code> of a slice type with no alignment …\nConstructs a new <code>Ref</code> of a slice type with no alignment …\nConstructs a new <code>Ref</code> of a slice type with no alignment …\nConstructs a new <code>Ref</code> of a slice type with no alignment …\nConstructs a new <code>Ref</code> for a slice type with no alignment …\nConstructs a new <code>Ref</code> of a slice type after zeroing the …\nConstructs a new <code>Ref</code> for a type with no alignment …\nConstructs a new <code>Ref</code> from the prefix of a byte slice for a …\nConstructs a new <code>Ref</code> from the prefix of a byte slice for a …\nConstructs a new <code>Ref</code> from the suffix of a byte slice for a …\nConstructs a new <code>Ref</code> from the suffix of a byte slice for a …\nConstructs a new <code>Ref</code> for a type with no alignment …\nCreates an instance of <code>Self</code> from zeroed bytes.\nConstructs a new <code>Ref</code> after zeroing the bytes.\nReads a copy of <code>T</code>.\nReads a copy of <code>Self</code> from <code>bytes</code>.\nReads a copy of <code>Self</code> from the prefix of <code>bytes</code>.\nReads a copy of <code>Self</code> from the suffix of <code>bytes</code>.\nInterprets the given <code>bytes</code> as a <code>&amp;Self</code> without copying.\nInterprets the prefix of the given <code>bytes</code> as a <code>&amp;Self</code> …\nInterprets the suffix of the given <code>bytes</code> as a <code>&amp;Self</code> …\nSets the inner <code>T</code>, dropping the previous value.\nInterprets the given <code>bytes</code> as a <code>&amp;[Self]</code> without copying.\nInterprets the prefix of the given <code>bytes</code> as a <code>&amp;[Self]</code> with …\nInterprets the suffix of the given <code>bytes</code> as a <code>&amp;[Self]</code> with …\nSplits the slice at the midpoint.\nSafely transmutes a value of one type to a value of …\nSafely transmutes a mutable reference of one type to an …\nSafely transmutes a mutable or immutable reference of one …\nAttempts to return a reference to the wrapped <code>T</code>, failing …\nAttempts to return a mutable reference to the wrapped <code>T</code>, …\nUpdates the inner <code>T</code> by calling a function on it.\nWrites the bytes of <code>t</code> and then forgets <code>t</code>.\nWrites a copy of <code>self</code> to <code>bytes</code>.\nWrites a copy of <code>self</code> to the prefix of <code>bytes</code>.\nWrites a copy of <code>self</code> to the suffix of <code>bytes</code>.\nOverwrites <code>self</code> with zeroes.\nA type alias for <code>BigEndian</code>.\nDefines big-endian serialization.\n<code>ByteOrder</code> describes types that can serialize integers as …\nA 32-bit floating point number stored in a given byte …\nA 64-bit floating point number stored in a given byte …\nA 128-bit signed integer stored in a given byte order.\nA 16-bit signed integer stored in a given byte order.\nA 32-bit signed integer stored in a given byte order.\nA 64-bit signed integer stored in a given byte order.\nA type alias for <code>LittleEndian</code>.\nDefines little-endian serialization.\nThe maximum value.\nThe maximum value.\nThe maximum value.\nThe maximum value.\nDefines system native-endian serialization.\nDefines network byte order serialization.\nA 128-bit unsigned integer stored in a given byte order.\nA 16-bit unsigned integer stored in a given byte order.\nA 32-bit unsigned integer stored in a given byte order.\nA 64-bit unsigned integer stored in a given byte order.\nThe value zero.\nThe value zero.\nThe value zero.\nThe value zero.\nThe value zero.\nThe value zero.\nThe value zero.\nThe value zero.\nThe value zero.\nThe value zero.\nNumeric primitives stored in big-endian byte order.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs a new value from bytes which are already in the …\nConstructs a new value from bytes which are already in the …\nConstructs a new value from bytes which are already in the …\nConstructs a new value from bytes which are already in the …\nConstructs a new value from bytes which are already in the …\nConstructs a new value from bytes which are already in the …\nConstructs a new value from bytes which are already in the …\nConstructs a new value from bytes which are already in the …\nConstructs a new value from bytes which are already in the …\nConstructs a new value from bytes which are already in the …\nConverts the given slice of IEEE754 single-precision (4 …\nConverts the given slice of IEEE754 double-precision (8 …\nConverts the given slice of signed 128 bit integers to a …\nConverts the given slice of signed 16 bit integers to a …\nConverts the given slice of signed 32 bit integers to a …\nConverts the given slice of signed 64 bit integers to a …\nConverts the given slice of unsigned 128 bit integers to a …\nConverts the given slice of unsigned 16 bit integers to a …\nConverts the given slice of unsigned 32 bit integers to a …\nConverts the given slice of unsigned 64 bit integers to a …\nReturns the value as a primitive type, possibly performing …\nReturns the value as a primitive type, possibly performing …\nReturns the value as a primitive type, possibly performing …\nReturns the value as a primitive type, possibly performing …\nReturns the value as a primitive type, possibly performing …\nReturns the value as a primitive type, possibly performing …\nReturns the value as a primitive type, possibly performing …\nReturns the value as a primitive type, possibly performing …\nReturns the value as a primitive type, possibly performing …\nReturns the value as a primitive type, possibly performing …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNumeric primitives stored in little-endian byte order.\nNumeric primitives stored in native-endian byte order.\nNumeric primitives stored in network-endian byte order.\nConstructs a new value, possibly performing an endianness …\nConstructs a new value, possibly performing an endianness …\nConstructs a new value, possibly performing an endianness …\nConstructs a new value, possibly performing an endianness …\nConstructs a new value, possibly performing an endianness …\nConstructs a new value, possibly performing an endianness …\nConstructs a new value, possibly performing an endianness …\nConstructs a new value, possibly performing an endianness …\nConstructs a new value, possibly performing an endianness …\nConstructs a new value, possibly performing an endianness …\nReads a IEEE754 single-precision (4 bytes) floating point …\nReads IEEE754 single-precision (4 bytes) floating point …\n<strong>DEPRECATED</strong>.\nReads a IEEE754 double-precision (8 bytes) floating point …\nReads IEEE754 single-precision (4 bytes) floating point …\n<strong>DEPRECATED</strong>.\nReads a signed 128 bit integer from <code>buf</code>.\nReads signed 128 bit integers from <code>src</code> into <code>dst</code>.\nReads a signed 16 bit integer from <code>buf</code>.\nReads signed 16 bit integers from <code>src</code> to <code>dst</code>.\nReads a signed 24 bit integer from <code>buf</code>, stored in i32.\nReads a signed 32 bit integer from <code>buf</code>.\nReads signed 32 bit integers from <code>src</code> into <code>dst</code>.\nReads a signed 48 bit integer from <code>buf</code>, stored in i64.\nReads a signed 64 bit integer from <code>buf</code>.\nReads signed 64 bit integers from <code>src</code> into <code>dst</code>.\nReads a signed n-bytes integer from <code>buf</code>.\nReads a signed n-bytes integer from <code>buf</code>.\nReads an unsigned 128 bit integer from <code>buf</code>.\nReads unsigned 128 bit integers from <code>src</code> into <code>dst</code>.\nReads an unsigned 16 bit integer from <code>buf</code>.\nReads unsigned 16 bit integers from <code>src</code> into <code>dst</code>.\nReads an unsigned 24 bit integer from <code>buf</code>, stored in u32.\nReads an unsigned 32 bit integer from <code>buf</code>.\nReads unsigned 32 bit integers from <code>src</code> into <code>dst</code>.\nReads an unsigned 48 bit integer from <code>buf</code>, stored in u64.\nReads an unsigned 64 bit integer from <code>buf</code>.\nReads unsigned 64 bit integers from <code>src</code> into <code>dst</code>.\nReads an unsigned n-bytes integer from <code>buf</code>.\nReads an unsigned n-bytes integer from <code>buf</code>.\nUpdates the value in place as a primitive type, possibly …\nUpdates the value in place as a primitive type, possibly …\nUpdates the value in place as a primitive type, possibly …\nUpdates the value in place as a primitive type, possibly …\nUpdates the value in place as a primitive type, possibly …\nUpdates the value in place as a primitive type, possibly …\nUpdates the value in place as a primitive type, possibly …\nUpdates the value in place as a primitive type, possibly …\nUpdates the value in place as a primitive type, possibly …\nUpdates the value in place as a primitive type, possibly …\nWrites a IEEE754 single-precision (4 bytes) floating point …\nWrites IEEE754 single-precision (4 bytes) floating point …\nWrites a IEEE754 double-precision (8 bytes) floating point …\nWrites IEEE754 double-precision (8 bytes) floating point …\nWrites a signed 128 bit integer <code>n</code> to <code>buf</code>.\nWrites signed 128 bit integers from <code>src</code> into <code>dst</code>.\nWrites a signed 16 bit integer <code>n</code> to <code>buf</code>.\nWrites signed 16 bit integers from <code>src</code> into <code>dst</code>.\nWrites a signed 24 bit integer <code>n</code> to <code>buf</code>, stored in i32.\nWrites a signed 32 bit integer <code>n</code> to <code>buf</code>.\nWrites signed 32 bit integers from <code>src</code> into <code>dst</code>.\nWrites a signed 48 bit integer <code>n</code> to <code>buf</code>, stored in i64.\nWrites a signed 64 bit integer <code>n</code> to <code>buf</code>.\nWrites signed 64 bit integers from <code>src</code> into <code>dst</code>.\nWrites signed 8 bit integers from <code>src</code> into <code>dst</code>.\nWrites a signed integer <code>n</code> to <code>buf</code> using only <code>nbytes</code>.\nWrites a signed integer <code>n</code> to <code>buf</code> using only <code>nbytes</code>.\nWrites an unsigned 128 bit integer <code>n</code> to <code>buf</code>.\nWrites unsigned 128 bit integers from <code>src</code> into <code>dst</code>.\nWrites an unsigned 16 bit integer <code>n</code> to <code>buf</code>.\nWrites unsigned 16 bit integers from <code>src</code> into <code>dst</code>.\nWrites an unsigned 24 bit integer <code>n</code> to <code>buf</code>, stored in u32.\nWrites an unsigned 32 bit integer <code>n</code> to <code>buf</code>.\nWrites unsigned 32 bit integers from <code>src</code> into <code>dst</code>.\nWrites an unsigned 48 bit integer <code>n</code> to <code>buf</code>, stored in u64.\nWrites an unsigned 64 bit integer <code>n</code> to <code>buf</code>.\nWrites unsigned 64 bit integers from <code>src</code> into <code>dst</code>.\nWrites an unsigned integer <code>n</code> to <code>buf</code> using only <code>nbytes</code>.\nWrites an unsigned integer <code>n</code> to <code>buf</code> using only <code>nbytes</code>.\nA 32-bit floating point number stored in big-endian byte …\nA 64-bit floating point number stored in big-endian byte …\nA 128-bit signed integer stored in big-endian byte order.\nA 16-bit signed integer stored in big-endian byte order.\nA 32-bit signed integer stored in big-endian byte order.\nA 64-bit signed integer stored in big-endian byte order.\nA 128-bit unsigned integer stored in big-endian byte order.\nA 16-bit unsigned integer stored in big-endian byte order.\nA 32-bit unsigned integer stored in big-endian byte order.\nA 64-bit unsigned integer stored in big-endian byte order.\nA 32-bit floating point number stored in little-endian …\nA 64-bit floating point number stored in little-endian …\nA 128-bit signed integer stored in little-endian byte …\nA 16-bit signed integer stored in little-endian byte order.\nA 32-bit signed integer stored in little-endian byte order.\nA 64-bit signed integer stored in little-endian byte order.\nA 128-bit unsigned integer stored in little-endian byte …\nA 16-bit unsigned integer stored in little-endian byte …\nA 32-bit unsigned integer stored in little-endian byte …\nA 64-bit unsigned integer stored in little-endian byte …\nA 32-bit floating point number stored in native-endian …\nA 64-bit floating point number stored in native-endian …\nA 128-bit signed integer stored in native-endian byte …\nA 16-bit signed integer stored in native-endian byte order.\nA 32-bit signed integer stored in native-endian byte order.\nA 64-bit signed integer stored in native-endian byte order.\nA 128-bit unsigned integer stored in native-endian byte …\nA 16-bit unsigned integer stored in native-endian byte …\nA 32-bit unsigned integer stored in native-endian byte …\nA 64-bit unsigned integer stored in native-endian byte …\nA 32-bit floating point number stored in network-endian …\nA 64-bit floating point number stored in network-endian …\nA 128-bit signed integer stored in network-endian byte …\nA 16-bit signed integer stored in network-endian byte …\nA 32-bit signed integer stored in network-endian byte …\nA 64-bit signed integer stored in network-endian byte …\nA 128-bit unsigned integer stored in network-endian byte …\nA 16-bit unsigned integer stored in network-endian byte …\nA 32-bit unsigned integer stored in network-endian byte …\nA 64-bit unsigned integer stored in network-endian byte …")