searchState.loadedDescShard("salty", 0, "Mashup of TweetNaCl with ed25519-dalek aimed towards …\n“Compressed” form of a <code>EdwardsPoint</code>, whereby the sign …\nContext for prehashed signatures too long\nThese represent the (X,Y,Z,T) coordinates\nContains the error value\nExtensible error type for all <code>salty</code> operations.\nElement of the base field of the elliptic curve\nRequirements on an implementation of the base field.\nInternal representation as limbs\nHolds the \\(u\\)-coordinate of a point on the Montgomery …\nNever occurs, simplifies C bindings\nBytes do not correspond to a canonical base field element\nContains the success value\nPublic key bytes invalid\nResult type for all <code>salty</code> operations.\nSince the curve is an abelian group, it has a module …\nself-contained Sha512 hash, following TweetNaCl\nSignature verification failed\nPoint is on other twist of curve\nAddition of field elements\n99.9% cribbed from x25519-dalek\nThis is rather tricky: to get the x-coordinate, and not …\nThe order of the group, 2**252 + something something\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nconstruct from canonical representation as little-endian …\nconstruct from canonical representation as little-endian …\nconstruct from canonical representation as little-endian …\nconstruct from possibly non-canonical representation as …\nconstruct from possibly non-canonical representation as …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck whether this <code>Scalar</code> is the canonical representative …\nGiven <code>self</code> \\( = u_0(P) \\), and a <code>Scalar</code> \\(n\\), return \\( u…\nSubition of field elements\nparity of field element, viewed as integer modulo 2**255 - …\nparity of field element, viewed as integer modulo 2**255 - …\nTODO: figure out why this doesn’t pass the test at the …\nReduce this <code>Scalar</code> modulo \\(\\ell\\).\ndefault implementation, actual implementation may override …\ndefault implementation, actual implementation may override …\nSubition of field elements\nto canonical representation as little-endian bytes\nConvert this <code>MontgomeryPoint</code> to an array of bytes.\nAttempt to convert to an <code>EdwardsPoint</code>, using the supplied …\nConvert this <code>EdwardsPoint</code> on the Edwards model to the …\nThe u-coordinate of the X25519 point\nThe x-coordinate of the point\nThe y-coordinate of the point\nA X25519 secret key.\nThe result of a Diffie-Hellman key exchange.\nPerform a Diffie-Hellman key agreement between <code>self</code> and …\nGiven an x25519 <code>SecretKey</code> key, compute its corresponding …\nReturns the argument unchanged.\nGiven a byte array, construct a x25519 <code>PublicKey</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCorresponding public key.\nConvert this public key to a byte array.\nExtract this key’s bytes for serialization.\nImplementations:\nthe length of a compressed point\nthe length of a field element (base field of Curve25519)\nthe length of a public key when serialized\nthe length of a scalar (module structure on Curve25519)\nthe length of the nonce part of a secret key (internal)\nthe length of the scalar part of a secret key (internal)\nthe length of the seed part of a secret key (internal)\nthe length of a secret key when serialized\nthe length of a SHA256 digest\nthe length of a SHA512 digest\nthe length of a signature when serialized\npair of secret and corresponding public keys\na public key, consisting internally of both its defining …\na secret key, consisting internally of the seed and its …\na signature: pair consisting of a curve point “R” in …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")