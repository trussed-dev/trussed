searchState.loadedDescShard("delog", 0, "Compile-time configurable deferred logging (for <code>printf()</code>…\nThe “debug” level.\nCorresponds to the <code>Debug</code> log level.\nSemi-abstract characterization of the deferred loggers …\nThe “error” level.\nCorresponds to the <code>Error</code> log level.\nA way to pass on logs, user supplied.\nThe “info” level.\nCorresponds to the <code>Info</code> log level.\nAn enum representing the available verbosity levels of the …\nAn enum representing the available verbosity level filters …\nA level lower than all log levels.\nThe “payload” of a log message.\nA way to format logs, user supplied.\nTrait for either state or statistics of loggers.\nStatistics on logger usage.\nThe “trace” level.\nCorresponds to the <code>Trace</code> log level.\nFallible, panic-free version of the <code>log::Log</code> trait.\nTryLog with some usage statistics on top.\nThe “warn” level.\nCorresponds to the <code>Warn</code> log level.\nThe message body.\nReturns the string representation of the <code>Level</code>.\nReturns the string representation of the <code>LevelFilter</code>.\nHow often was one of the logging macros called.\nHow often was one of the logging macros called.\nthe underlying buffer\nReturns a new builder.\nCapacity of circular buffer.\nCapacity of circular buffer.\nHow many characters were claimed so far.\nGenerate a deferred logger with specified capacity and …\nThe core “read from circular buffer” method. Marked …\nThe core “write to circular buffer” method. Marked …\nThe source file containing the message.\nThe source file containing the message, if it is a <code>&#39;static</code> …\nCall the flusher.\nImplementor must handle passed log <code>&amp;str</code> in some hopefully …\nHow often was the flusher called.\nHow often was the flusher called.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerate logging macros that can be gated by library.\nConvenient <code>Display</code> and other traits for binary data.\nCompactly format byte arrays and slices as hexadecimals.\nMore compactly format byte arrays and slices as …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIterate through all supported logging levels.\nIterate through all supported filtering levels.\nThe verbosity level of the message.\nThe line containing the message.\nReturns a reference to the logger (as <code>TryLogWithStatistics</code> …\nReturns the most verbose logging level.\nReturns the most verbose logging level filter.\nMetadata about the log directive.\nThe module path of the message.\nThe module path of the message, if it is a <code>&#39;static</code> string.\nHow many bytes were flushed so far.\nHow many bytes were flushed so far.\nThe default, minimal renderer, and some helper functions.\nActually render the arguments (via internal static buffer).\nImplementor must render record into <code>buf</code>, returning the …\nRead out statistics on logger usage.\nRead out statistics on logger usage.\nHow often was one of the logging macros called without …\nHow often was one of the logging macros called without …\nThe name of the target of the directive.\nConverts <code>self</code> to the equivalent <code>Level</code>.\nConverts the <code>Level</code> to the equivalent <code>LevelFilter</code>.\nThe fallible “write to circular buffer” method. Marked …\nFallible logging call (fails when buffer is full)\nHow many bytes were logged so far.\nHow many bytes were logged so far.\nZero-sized wrapper newtype, allowing grouping bytes in …\nExplicitly construct a newtype to format with.\nThe actual number.\nThe actual separator str.\nA type that specifies a separator str.\nA type that represents the integer <code>1</code>.\nA type that specifies an unsigned integer.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe value to be formatted.\nRenders just the <code>record.args()</code>.\nRenders the <code>record.args()</code>, prefixed by level, target, and …\nThe default, minimal renderer.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nFor some reason, there seems to be no existing method to …\nRender record, based on feature flags.")