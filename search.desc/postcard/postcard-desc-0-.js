searchState.loadedDescShard("postcard", 0, "Postcard\nAn accumulator used to collect chunked COBS data and …\nConsumed all data, still pending.\nReached end of chunk, but deserialization failed. Contains …\nFound a bool that wasn’t 0 or 1\nFound an invalid unicode char\nThe original data was not well encoded\nFound an enum discriminant that was &gt; u32::max_value()\nFound an Option discriminant that wasn’t 0 or 1\nTried to parse invalid utf-8\nFound a varint that didn’t terminate. Is the usize too …\nHit the end of buffer, expected more data\nA structure for deserializing a postcard message. For now, …\nContains the error value\nThis is the error type used by Postcard\nThe result of feeding the accumulator.\nThis is a feature that Postcard intends to support, but …\nContains the success value\nBuffer was filled. Contains remaining section of input, if …\nThis is the Result type used by Postcard.\nSerde Deserialization Error\nSerde Serialization Error\nThe serialize buffer is full\nThe length of a sequence must be known\nA <code>serde</code> compatible serializer, generic over “Flavors” …\nDeserialization complete. Contains deserialized data and …\nThis is a feature that PostCard will never implement\nAppends data to the internal buffer and attempts to …\nFlavors - Plugins for <code>postcard</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nDeserialize a message of type <code>T</code> from a byte slice. The …\nObtain a Deserializer from a slice of bytes\nDeserialize a message of type <code>T</code> from a cobs-encoded byte …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new accumulator.\nThis is the Flavor(s) that will be used to modify or store …\n<code>serialize_with_flavor()</code> has three generic parameters, …\nDeserialize a message of type <code>T</code> from a byte slice. The …\nDeserialize a message of type <code>T</code> from a cobs-encoded byte …\nSerialize a <code>T</code> to the given slice, with the resulting slice …\nSerialize a <code>T</code> to the given slice, with the resulting slice …\nSerialize a <code>T</code> to a <code>heapless::Vec&lt;u8&gt;</code>, with the <code>Vec</code> …\nSerialize a <code>T</code> to a <code>heapless::Vec&lt;u8&gt;</code>, with the <code>Vec</code> …\nDeserialize data.\nRemaining data left in the buffer after deserializing.\nThe <code>Cobs</code> flavor implements Consistent Overhead Byte …\nThe <code>HVec</code> flavor is a wrapper type around a <code>heapless::Vec</code>. …\nThe <code>Output</code> type is what this flavor “resolves” to when …\nThe SerFlavor trait acts as a combinator/middleware …\nThe <code>Slice</code> flavor is a storage flavor, storing the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new <code>Slice</code> flavor from a given backing buffer\nThe release() trait method finalizes the modification or …\nThe try_extend() trait method can be implemented when …\nThe try_extend() trait method can be implemented when …\nCreate a new Cobs modifier Flavor. If there is …\nThe try_push() trait method can be used to push a single …\nThe try_push_varint_usize() trait method can be used to …\nThe try_push_varint_usize() trait method can be used to …")