searchState.loadedDescShard("flexiber", 0, "flexiber\nClass of BER tag.\nMultiple encodables in a container.\nDecoding trait.\nDerive the <code>Decodable</code> trait on a struct.\nBER-TLV decoder.\nEncoding trait.\nDerive the <code>Encodable</code> trait on a struct.\nThe equivalent of the <code>encode_to_vec</code> and <code>to_vec</code> methods.\nBER-TLV encoder.\nContains the error value\nError type.\nError type.\nOperation failed due to previous error\nClass has more than 2 bytes\nLength greater than u16::MAX\nInvalid tag\nBER-TLV-encoded length.\nIncorrect length for a given field\nContains the success value\nInteger overflow occurred (library bug!)\nMessage is longer than BER-TLV’s limits support\nResult type.\nThese are tags like in SIMPLE-TLV.\nSlice of at most <code>Length::max()</code> bytes.\nThe tag field consists of a single byte encoding a tag …\nThis is the common trait that types to be used as tags are …\nTypes with an associated BER-TLV <code>Tag</code>.\nRaw BER-TLV data object <code>TaggedValue&lt;Slice&lt;&#39;_&gt;&gt;</code>.\nBER-TLV data object.\nUndecoded trailing data at end of message\nUnexpected end-of-message/nested field when decoding\nEncoded message is shorter than the expected length (i.e. …\nUnexpected tag\nTag does not fit in 3 bytes\nBorrow the inner byte slice.\nBorrow the inner byte slice\nBorrow the inner byte slice.\nAssert that this <code>Tag</code> matches the provided expected tag.\nAssert that this <code>Tag</code> matches the provided expected tag.\nAnnotate an <code>ErrorKind</code> with context about where it occurred,\nAttempt to decode this message using the provided decoder.\nDecode a value which impls the <code>Decodable</code> trait.\nDecode nested values, creating a new <code>Decoder</code> for the data …\nDecode nested values, creating a new <code>Decoder</code> for the data …\nDecode a TaggedSlice with tag checked to be as expected, …\nDecode a TaggedValue with tag checked to be as expected, …\nTo stick with one Error type, make sure the tag type can …\nEncode this value as BER-TLV using the provided <code>Encoder</code>.\nEncode a value which impls the <code>Encodable</code> trait.\nEncode a collection of values which impl the <code>Encodable</code> …\nEncode this message as BER-TLV, appending it to the …\nEncode this message as BER-TLV, appending it to the …\nEncode this value to the provided byte slice, returning a …\nEncode this value to the provided byte slice, returning a …\nEncode a collection of values which impl the <code>Encodable</code> …\nCompute the length of this value in bytes when encoded as …\nReturn an error with the given <code>ErrorKind</code>, annotating it …\nReturn an error with the given <code>ErrorKind</code>, annotating it …\nCall the provided function with a slice of <code>Encodable</code> trait …\nFinish decoding, returning the given value if there is no …\nFinish encoding to the buffer, returning a slice …\nCreate a new tagged slice, checking lengths.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new tagged slice, checking lengths.\nReturns the argument unchanged.\nParse <code>Self</code> from the provided byte slice.\nParse <code>Self</code> from the provided byte slice.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIs the inner byte slice empty?\nIs this <code>Slice</code> empty?\nIs the inner byte slice empty?\nDid the decoding operation fail due to an error?\nDid the decoding operation fail due to an error?\nHave we decoded all of the bytes in this <code>Decoder</code>?\nGet the <code>ErrorKind</code> which occurred.\nGet the length of the inner byte slice.\nGet the <code>Length</code> of this <code>Slice</code>\nGet the length of the inner byte slice.\nGet the maximum length supported by BER-TLV: 65,535.\nFor errors occurring inside of a nested message, extend …\nCreate a new decoder for the given byte slice.\nCreate a new encoder with the given byte slice as a …\nCreate a new <code>Error</code>\nCreate a new <code>Slice</code>, ensuring that the provided <code>slice</code> value …\nGet the position inside of the message where the error …\nThe tag\nSerialize this message as a byte vector.\nSerialize this message as a byte vector.\nConvert length to <code>usize</code>.\nErgonomic way to get a TaggedValue for a given tag and …\nErgonomic way to get a TaggedValue for a given tag and …\nReturn a length of <code>0</code>.\nActual length\nActual tag encountered in the message\nRaw byte value of the tag\nLength of the decoded data\nExpected length\nTag the decoder was expecting (if there is a single such …\nTotal length of the remaining data left in the buffer\nTag type of the value being decoded")