searchState.loadedDescShard("p256", 0, "Pure Rust implementation of the NIST P-256 elliptic curve, …\nA point on the secp256r1 curve in affine coordinates.\nScalar blinded with a randomly generated masking value.\nCompressed SEC1-encoded NIST P-256 curve point.\nNIST P-256 SEC1 encoded point.\nNIST P-256 field element serialized as bytes.\nNIST P-256 elliptic curve.\nNon-zero NIST P-256 scalar field element.\nA point on the secp256r1 curve in projective coordinates.\nNIST P-256 public key.\nScalars are elements in the finite field modulo n.\nScalar bytes: wrapper for <code>FieldBytes</code> which guarantees that …\nNIST P-256 secret key.\n256-bit unsigned big integer\nReturns self + rhs mod n\nDoubles this point.\nReturns 2*self.\nElliptic Curve Diffie-Hellman (Ephemeral) Support.\nElliptic Curve Digital Signature Algorithm (ECDSA)\nReturns the argument unchanged.\nReturns the SEC1 compressed encoding of this point.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nParses the given byte array as a scalar.\nConvert the output of a digest algorithm into a <code>Scalar</code> …\nAttempts to parse the given <code>EncodedPoint</code> as an …\nAttempts to parse the given byte array as an SEC1-encoded …\nReturns the base point of P-256.\nReturns the base point of P-256.\nReturns the identity of the group: the point at infinity.\nReturns the additive identity of P-256, also known as the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the multiplicative inverse of self, if self is …\nFaster inversion using Stein’s algorithm\nIs integer representing equivalence class even\nIs this point the identity point?\nIs integer representing equivalence class odd\nDetermine if this <code>Scalar</code> is zero.\nReturns self * rhs mod n\nCreate a new <code>BlindedScalar</code> from a scalar and a <code>CryptoRng</code>\nReturns the multiplicative identity.\nReturns <code>self^by</code>, where <code>by</code> is a little-endian integer …\nReturns self * self mod p\nReturns self - rhs mod n\nReturns the affine representation of this point, or <code>None</code> …\nReturns the SEC1 encoding of this scalar.\nConvert to curve representation.\nReturns the zero scalar.\nNIST P-256 Ephemeral Diffie-Hellman Secret.\nShared secret value computed via ECDH key agreement.\nECDSA/P-256 signature (ASN.1 DER encoded)\nSignature errors.\nECDSA/P-256 signature (fixed-size)\nECDSA/P-256 signing key\nECDSA/P-256 verification key (i.e. public key)\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new error with no associated source")