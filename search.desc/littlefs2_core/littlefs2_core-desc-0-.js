searchState.loadedDescShard("littlefs2_core", 0, "Core types for the <code>littlefs2</code> crate.\nOpen the file in append only mode.\nIterator over the ancestors of a Path\nCustom user attribute that can be set on files and …\nBad file descriptor.\nFile or filesystem was corrupt.\nCreate the file if it does not exist.\nDirectory was not empty.\nObject-safe trait for files.\nObject-safe trait for filesystems.\nFile or directory already exists.\nFail if creating a file that already exists. TODO: Good …\nContains the error value\nThe error type for filesystem operations.\nFilename too long\nFile is too big.\nDefinition of file open flags which can be mixed and …\nRegular file vs directory\nIncorrect value specified to function.\nInput / output error occurred.\nIterator over the components of a Path\nFile type (regular vs directory) and size of a file.\nNo attribute or data available\nNo memory available for completing request.\nNo space left available for operation.\nNo entry found with that name.\nByte buffer contains non-ASCII characters\nByte buffer is not a C string\nContains the success value\nEnumeration of possible methods to seek within an file …\nPath specification is to a directory.\nPath name is not a directory.\nA path\nAn owned, mutable path\nErrors that arise from converting byte buffers into paths\nOpen file in read only mode.\nOpen file for reading and writing.\nThe <code>Read</code> trait allows for reading bytes from a file.\nThe <code>Seek</code> trait provides a cursor which can be moved within …\nEnumeration of possible methods to seek within an I/O …\nTruncate the file if it already exists.\nByte buffer is too long (longer than …\nOpen file in write only mode.\nThe <code>Write</code> trait allows for writing bytes to a file.\nGet a flags value with all known bits set.\nIterate over the ancestors of the path\nReturns the inner pointer to this C string.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nCompare the path using their string representation\nCompare the path using their string representation This …\nReturn the error code of this error.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet the name of the file this path points to if it points …\nWrite out all pending writes to storage.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nCreates a from a raw buffer containing a null-terminated …\nCreates a path from a byte buffer.\nCreates a path from a C string.\nCreates a path from a C string without checking the …\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nCreates a path from a string.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nReturn true if the path is empty\nYield a set of contained flags values.\nIterate over the components of the path\nYield a set of contained named flags values.\nCreates an owned <code>PathBuf</code> with <code>path</code> adjoined to <code>self</code>.\nConstruct an <code>Error</code> from an error code.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nReturns the full path to the file that this entry …\nCreates a path from a string without a trailing null.\nExtends <code>self</code> with <code>path</code>\nRead at most buf.len() bytes. Upon success, return how …\nThe intersection of a source flags value with the …\nSeek to an offset in bytes. If successful, returns the new …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nWrite at most data.len() bytes. The file will not …")