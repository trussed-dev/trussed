(function() {var type_impls = {
"trussed":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsMut%3C%5BT%5D%3E-for-Vec%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/heapless/vec.rs.html#1178\">source</a><a href=\"#impl-AsMut%3C%5BT%5D%3E-for-Vec%3CT,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/core/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/convert/trait.AsMut.html\" title=\"trait core::convert::AsMut\">AsMut</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/core/primitive.slice.html\">[T]</a>&gt; for <a class=\"struct\" href=\"trussed/types/struct.Vec.html\" title=\"struct trussed::types::Vec\">Vec</a>&lt;T, N&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/heapless/vec.rs.html#1180\">source</a><a href=\"#method.as_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.0/core/convert/trait.AsMut.html#tymethod.as_mut\" class=\"fn\">as_mut</a>(&amp;mut self) -&gt; &amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/core/primitive.slice.html\">[T]</a></h4></section></summary><div class='docblock'>Converts this type into a mutable reference of the (usually inferred) input type.</div></details></div></details>","AsMut<[T]>","trussed::key::Material","trussed::key::SerializedKeyBytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsMut%3CVec%3CT,+N%3E%3E-for-Vec%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/heapless/vec.rs.html#1164\">source</a><a href=\"#impl-AsMut%3CVec%3CT,+N%3E%3E-for-Vec%3CT,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/core/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/convert/trait.AsMut.html\" title=\"trait core::convert::AsMut\">AsMut</a>&lt;<a class=\"struct\" href=\"trussed/types/struct.Vec.html\" title=\"struct trussed::types::Vec\">Vec</a>&lt;T, N&gt;&gt; for <a class=\"struct\" href=\"trussed/types/struct.Vec.html\" title=\"struct trussed::types::Vec\">Vec</a>&lt;T, N&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/heapless/vec.rs.html#1166\">source</a><a href=\"#method.as_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.0/core/convert/trait.AsMut.html#tymethod.as_mut\" class=\"fn\">as_mut</a>(&amp;mut self) -&gt; &amp;mut <a class=\"struct\" href=\"trussed/types/struct.Vec.html\" title=\"struct trussed::types::Vec\">Vec</a>&lt;T, N&gt;</h4></section></summary><div class='docblock'>Converts this type into a mutable reference of the (usually inferred) input type.</div></details></div></details>","AsMut<Vec<T, N>>","trussed::key::Material","trussed::key::SerializedKeyBytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsRef%3C%5BT%5D%3E-for-Vec%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/heapless/vec.rs.html#1171\">source</a><a href=\"#impl-AsRef%3C%5BT%5D%3E-for-Vec%3CT,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/core/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/core/primitive.slice.html\">[T]</a>&gt; for <a class=\"struct\" href=\"trussed/types/struct.Vec.html\" title=\"struct trussed::types::Vec\">Vec</a>&lt;T, N&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ref\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/heapless/vec.rs.html#1173\">source</a><a href=\"#method.as_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.0/core/convert/trait.AsRef.html#tymethod.as_ref\" class=\"fn\">as_ref</a>(&amp;self) -&gt; &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/core/primitive.slice.html\">[T]</a></h4></section></summary><div class='docblock'>Converts this type into a shared reference of the (usually inferred) input type.</div></details></div></details>","AsRef<[T]>","trussed::key::Material","trussed::key::SerializedKeyBytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsRef%3CVec%3CT,+N%3E%3E-for-Vec%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/heapless/vec.rs.html#1157\">source</a><a href=\"#impl-AsRef%3CVec%3CT,+N%3E%3E-for-Vec%3CT,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/core/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"trussed/types/struct.Vec.html\" title=\"struct trussed::types::Vec\">Vec</a>&lt;T, N&gt;&gt; for <a class=\"struct\" href=\"trussed/types/struct.Vec.html\" title=\"struct trussed::types::Vec\">Vec</a>&lt;T, N&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ref\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/heapless/vec.rs.html#1159\">source</a><a href=\"#method.as_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.0/core/convert/trait.AsRef.html#tymethod.as_ref\" class=\"fn\">as_ref</a>(&amp;self) -&gt; &amp;<a class=\"struct\" href=\"trussed/types/struct.Vec.html\" title=\"struct trussed::types::Vec\">Vec</a>&lt;T, N&gt;</h4></section></summary><div class='docblock'>Converts this type into a shared reference of the (usually inferred) input type.</div></details></div></details>","AsRef<Vec<T, N>>","trussed::key::Material","trussed::key::SerializedKeyBytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Buffer-for-Vec%3Cu8,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/aead/lib.rs.html#568\">source</a><a href=\"#impl-Buffer-for-Vec%3Cu8,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/core/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"aead/trait.Buffer.html\" title=\"trait aead::Buffer\">Buffer</a> for <a class=\"struct\" href=\"trussed/types/struct.Vec.html\" title=\"struct trussed::types::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/core/primitive.u8.html\">u8</a>, N&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_from_slice\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/aead/lib.rs.html#569\">source</a><a href=\"#method.extend_from_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aead/trait.Buffer.html#tymethod.extend_from_slice\" class=\"fn\">extend_from_slice</a>(&amp;mut self, other: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/core/primitive.u8.html\">u8</a>]) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/core/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"aead/struct.Error.html\" title=\"struct aead::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Extend this buffer from the given slice</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.truncate\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/aead/lib.rs.html#573\">source</a><a href=\"#method.truncate\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aead/trait.Buffer.html#tymethod.truncate\" class=\"fn\">truncate</a>(&amp;mut self, len: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/core/primitive.usize.html\">usize</a>)</h4></section></summary><div class='docblock'>Truncate this buffer to the given size</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.len\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/aead/lib.rs.html#508\">source</a><a href=\"#method.len\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aead/trait.Buffer.html#method.len\" class=\"fn\">len</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/core/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Get the length of the buffer</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_empty\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/aead/lib.rs.html#513\">source</a><a href=\"#method.is_empty\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"aead/trait.Buffer.html#method.is_empty\" class=\"fn\">is_empty</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/core/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Is the buffer empty?</div></details></div></details>","Buffer","trussed::key::Material","trussed::key::SerializedKeyBytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-Vec%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/heapless/vec.rs.html#1185-1187\">source</a><a href=\"#impl-Clone-for-Vec%3CT,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/core/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"trussed/types/struct.Vec.html\" title=\"struct trussed::types::Vec\">Vec</a>&lt;T, N&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/heapless/vec.rs.html#1189\">source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.0/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"struct\" href=\"trussed/types/struct.Vec.html\" title=\"struct trussed::types::Vec\">Vec</a>&lt;T, N&gt;</h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"https://doc.rust-lang.org/1.80.0/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/clone.rs.html#169\">source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.0/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/core/primitive.reference.html\">&amp;Self</a>)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/1.80.0/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","trussed::key::Material","trussed::key::SerializedKeyBytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-Vec%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/heapless/vec.rs.html#836-838\">source</a><a href=\"#impl-Debug-for-Vec%3CT,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/core/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"trussed/types/struct.Vec.html\" title=\"struct trussed::types::Vec\">Vec</a>&lt;T, N&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/heapless/vec.rs.html#840\">source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.0/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/core/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.80.0/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","trussed::key::Material","trussed::key::SerializedKeyBytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-Vec%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/heapless/vec.rs.html#830\">source</a><a href=\"#impl-Default-for-Vec%3CT,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/core/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> for <a class=\"struct\" href=\"trussed/types/struct.Vec.html\" title=\"struct trussed::types::Vec\">Vec</a>&lt;T, N&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/heapless/vec.rs.html#831\">source</a><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.0/core/default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; <a class=\"struct\" href=\"trussed/types/struct.Vec.html\" title=\"struct trussed::types::Vec\">Vec</a>&lt;T, N&gt;</h4></section></summary><div class='docblock'>Returns the “default value” for a type. <a href=\"https://doc.rust-lang.org/1.80.0/core/default/trait.Default.html#tymethod.default\">Read more</a></div></details></div></details>","Default","trussed::key::Material","trussed::key::SerializedKeyBytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Deref-for-Vec%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/heapless/vec.rs.html#1143\">source</a><a href=\"#impl-Deref-for-Vec%3CT,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/core/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\">Deref</a> for <a class=\"struct\" href=\"trussed/types/struct.Vec.html\" title=\"struct trussed::types::Vec\">Vec</a>&lt;T, N&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Target\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Target\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.80.0/core/ops/deref/trait.Deref.html#associatedtype.Target\" class=\"associatedtype\">Target</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/core/primitive.slice.html\">[T]</a></h4></section></summary><div class='docblock'>The resulting type after dereferencing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.deref\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/heapless/vec.rs.html#1146\">source</a><a href=\"#method.deref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.0/core/ops/deref/trait.Deref.html#tymethod.deref\" class=\"fn\">deref</a>(&amp;self) -&gt; &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/core/primitive.slice.html\">[T]</a></h4></section></summary><div class='docblock'>Dereferences the value.</div></details></div></details>","Deref","trussed::key::Material","trussed::key::SerializedKeyBytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-DerefMut-for-Vec%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/heapless/vec.rs.html#1151\">source</a><a href=\"#impl-DerefMut-for-Vec%3CT,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/core/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/ops/deref/trait.DerefMut.html\" title=\"trait core::ops::deref::DerefMut\">DerefMut</a> for <a class=\"struct\" href=\"trussed/types/struct.Vec.html\" title=\"struct trussed::types::Vec\">Vec</a>&lt;T, N&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.deref_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/heapless/vec.rs.html#1152\">source</a><a href=\"#method.deref_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.0/core/ops/deref/trait.DerefMut.html#tymethod.deref_mut\" class=\"fn\">deref_mut</a>(&amp;mut self) -&gt; &amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/core/primitive.slice.html\">[T]</a></h4></section></summary><div class='docblock'>Mutably dereferences the value.</div></details></div></details>","DerefMut","trussed::key::Material","trussed::key::SerializedKeyBytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Deserialize%3C'de%3E-for-Vec%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/heapless/de.rs.html#93-95\">source</a><a href=\"#impl-Deserialize%3C'de%3E-for-Vec%3CT,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'de, T, const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/core/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"serde/de/trait.Deserialize.html\" title=\"trait serde::de::Deserialize\">Deserialize</a>&lt;'de&gt; for <a class=\"struct\" href=\"trussed/types/struct.Vec.html\" title=\"struct trussed::types::Vec\">Vec</a>&lt;T, N&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"serde/de/trait.Deserialize.html\" title=\"trait serde::de::Deserialize\">Deserialize</a>&lt;'de&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.deserialize\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/heapless/de.rs.html#97-99\">source</a><a href=\"#method.deserialize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"serde/de/trait.Deserialize.html#tymethod.deserialize\" class=\"fn\">deserialize</a>&lt;D&gt;(\n    deserializer: D,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"trussed/types/struct.Vec.html\" title=\"struct trussed::types::Vec\">Vec</a>&lt;T, N&gt;, &lt;D as <a class=\"trait\" href=\"serde/de/trait.Deserializer.html\" title=\"trait serde::de::Deserializer\">Deserializer</a>&lt;'de&gt;&gt;::<a class=\"associatedtype\" href=\"serde/de/trait.Deserializer.html#associatedtype.Error\" title=\"type serde::de::Deserializer::Error\">Error</a>&gt;<div class=\"where\">where\n    D: <a class=\"trait\" href=\"serde/de/trait.Deserializer.html\" title=\"trait serde::de::Deserializer\">Deserializer</a>&lt;'de&gt;,</div></h4></section></summary><div class='docblock'>Deserialize this value from the given Serde deserializer. <a href=\"serde/de/trait.Deserialize.html#tymethod.deserialize\">Read more</a></div></details></div></details>","Deserialize<'de>","trussed::key::Material","trussed::key::SerializedKeyBytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Drop-for-Vec%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/heapless/vec.rs.html#854\">source</a><a href=\"#impl-Drop-for-Vec%3CT,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/core/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/ops/drop/trait.Drop.html\" title=\"trait core::ops::drop::Drop\">Drop</a> for <a class=\"struct\" href=\"trussed/types/struct.Vec.html\" title=\"struct trussed::types::Vec\">Vec</a>&lt;T, N&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.drop\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/heapless/vec.rs.html#855\">source</a><a href=\"#method.drop\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.0/core/ops/drop/trait.Drop.html#tymethod.drop\" class=\"fn\">drop</a>(&amp;mut self)</h4></section></summary><div class='docblock'>Executes the destructor for this type. <a href=\"https://doc.rust-lang.org/1.80.0/core/ops/drop/trait.Drop.html#tymethod.drop\">Read more</a></div></details></div></details>","Drop","trussed::key::Material","trussed::key::SerializedKeyBytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Extend%3C%26T%3E-for-Vec%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/heapless/vec.rs.html#880-882\">source</a><a href=\"#impl-Extend%3C%26T%3E-for-Vec%3CT,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T, const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/core/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/iter/traits/collect/trait.Extend.html\" title=\"trait core::iter::traits::collect::Extend\">Extend</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/core/primitive.reference.html\">&amp;'a T</a>&gt; for <a class=\"struct\" href=\"trussed/types/struct.Vec.html\" title=\"struct trussed::types::Vec\">Vec</a>&lt;T, N&gt;<div class=\"where\">where\n    T: 'a + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/heapless/vec.rs.html#884-886\">source</a><a href=\"#method.extend\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.0/core/iter/traits/collect/trait.Extend.html#tymethod.extend\" class=\"fn\">extend</a>&lt;I&gt;(&amp;mut self, iter: I)<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/core/primitive.reference.html\">&amp;'a T</a>&gt;,</div></h4></section></summary><div class='docblock'>Extends a collection with the contents of an iterator. <a href=\"https://doc.rust-lang.org/1.80.0/core/iter/traits/collect/trait.Extend.html#tymethod.extend\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_one\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/collect.rs.html#453\">source</a><a href=\"#method.extend_one\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.0/core/iter/traits/collect/trait.Extend.html#method.extend_one\" class=\"fn\">extend_one</a>(&amp;mut self, item: A)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Extends a collection with exactly one element.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_reserve\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/collect.rs.html#461\">source</a><a href=\"#method.extend_reserve\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.0/core/iter/traits/collect/trait.Extend.html#method.extend_reserve\" class=\"fn\">extend_reserve</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/core/primitive.usize.html\">usize</a>)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Reserves capacity in a collection for the given number of additional elements. <a href=\"https://doc.rust-lang.org/1.80.0/core/iter/traits/collect/trait.Extend.html#method.extend_reserve\">Read more</a></div></details></div></details>","Extend<&'a T>","trussed::key::Material","trussed::key::SerializedKeyBytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Extend%3CT%3E-for-Vec%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/heapless/vec.rs.html#871\">source</a><a href=\"#impl-Extend%3CT%3E-for-Vec%3CT,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/core/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/iter/traits/collect/trait.Extend.html\" title=\"trait core::iter::traits::collect::Extend\">Extend</a>&lt;T&gt; for <a class=\"struct\" href=\"trussed/types/struct.Vec.html\" title=\"struct trussed::types::Vec\">Vec</a>&lt;T, N&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/heapless/vec.rs.html#872-874\">source</a><a href=\"#method.extend\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.0/core/iter/traits/collect/trait.Extend.html#tymethod.extend\" class=\"fn\">extend</a>&lt;I&gt;(&amp;mut self, iter: I)<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = T&gt;,</div></h4></section></summary><div class='docblock'>Extends a collection with the contents of an iterator. <a href=\"https://doc.rust-lang.org/1.80.0/core/iter/traits/collect/trait.Extend.html#tymethod.extend\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_one\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/collect.rs.html#453\">source</a><a href=\"#method.extend_one\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.0/core/iter/traits/collect/trait.Extend.html#method.extend_one\" class=\"fn\">extend_one</a>(&amp;mut self, item: A)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Extends a collection with exactly one element.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_reserve\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/collect.rs.html#461\">source</a><a href=\"#method.extend_reserve\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.0/core/iter/traits/collect/trait.Extend.html#method.extend_reserve\" class=\"fn\">extend_reserve</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/core/primitive.usize.html\">usize</a>)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Reserves capacity in a collection for the given number of additional elements. <a href=\"https://doc.rust-lang.org/1.80.0/core/iter/traits/collect/trait.Extend.html#method.extend_reserve\">Read more</a></div></details></div></details>","Extend<T>","trussed::key::Material","trussed::key::SerializedKeyBytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromIterator%3CT%3E-for-Vec%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/heapless/vec.rs.html#928\">source</a><a href=\"#impl-FromIterator%3CT%3E-for-Vec%3CT,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/core/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/iter/traits/collect/trait.FromIterator.html\" title=\"trait core::iter::traits::collect::FromIterator\">FromIterator</a>&lt;T&gt; for <a class=\"struct\" href=\"trussed/types/struct.Vec.html\" title=\"struct trussed::types::Vec\">Vec</a>&lt;T, N&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/heapless/vec.rs.html#929-931\">source</a><a href=\"#method.from_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.0/core/iter/traits/collect/trait.FromIterator.html#tymethod.from_iter\" class=\"fn\">from_iter</a>&lt;I&gt;(iter: I) -&gt; <a class=\"struct\" href=\"trussed/types/struct.Vec.html\" title=\"struct trussed::types::Vec\">Vec</a>&lt;T, N&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = T&gt;,</div></h4></section></summary><div class='docblock'>Creates a value from an iterator. <a href=\"https://doc.rust-lang.org/1.80.0/core/iter/traits/collect/trait.FromIterator.html#tymethod.from_iter\">Read more</a></div></details></div></details>","FromIterator<T>","trussed::key::Material","trussed::key::SerializedKeyBytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Hash-for-Vec%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/heapless/vec.rs.html#892-894\">source</a><a href=\"#impl-Hash-for-Vec%3CT,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/core/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> for <a class=\"struct\" href=\"trussed/types/struct.Vec.html\" title=\"struct trussed::types::Vec\">Vec</a>&lt;T, N&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/heapless/vec.rs.html#896\">source</a><a href=\"#method.hash\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.0/core/hash/trait.Hash.html#tymethod.hash\" class=\"fn\">hash</a>&lt;H&gt;(&amp;self, state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/core/primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,</div></h4></section></summary><div class='docblock'>Feeds this value into the given <a href=\"https://doc.rust-lang.org/1.80.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/1.80.0/core/hash/trait.Hash.html#tymethod.hash\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash_slice\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/hash/mod.rs.html#238-240\">source</a></span><a href=\"#method.hash_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.0/core/hash/trait.Hash.html#method.hash_slice\" class=\"fn\">hash_slice</a>&lt;H&gt;(data: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/core/primitive.slice.html\">[Self]</a>, state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/core/primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Feeds a slice of this type into the given <a href=\"https://doc.rust-lang.org/1.80.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/1.80.0/core/hash/trait.Hash.html#method.hash_slice\">Read more</a></div></details></div></details>","Hash","trussed::key::Material","trussed::key::SerializedKeyBytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Hash-for-Vec%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/heapless/vec.rs.html#901-903\">source</a><a href=\"#impl-Hash-for-Vec%3CT,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/core/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"hash32/trait.Hash.html\" title=\"trait hash32::Hash\">Hash</a> for <a class=\"struct\" href=\"trussed/types/struct.Vec.html\" title=\"struct trussed::types::Vec\">Vec</a>&lt;T, N&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"hash32/trait.Hash.html\" title=\"trait hash32::Hash\">Hash</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/heapless/vec.rs.html#905\">source</a><a href=\"#method.hash\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"hash32/trait.Hash.html#tymethod.hash\" class=\"fn\">hash</a>&lt;H&gt;(&amp;self, state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/core/primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"hash32/trait.Hasher.html\" title=\"trait hash32::Hasher\">Hasher</a>,</div></h4></section></summary><div class='docblock'>Feeds this value into the given <code>Hasher</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash_slice\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/hash32/lib.rs.html#192-195\">source</a><a href=\"#method.hash_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"hash32/trait.Hash.html#method.hash_slice\" class=\"fn\">hash_slice</a>&lt;H&gt;(data: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/core/primitive.slice.html\">[Self]</a>, state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/core/primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"hash32/trait.Hasher.html\" title=\"trait hash32::Hasher\">Hasher</a>,\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Feeds a slice of this type into the given <code>Hasher</code>.</div></details></div></details>","Hash","trussed::key::Material","trussed::key::SerializedKeyBytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoIterator-for-Vec%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/heapless/vec.rs.html#999\">source</a><a href=\"#impl-IntoIterator-for-Vec%3CT,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/core/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a> for <a class=\"struct\" href=\"trussed/types/struct.Vec.html\" title=\"struct trussed::types::Vec\">Vec</a>&lt;T, N&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Item\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Item\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.80.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\" class=\"associatedtype\">Item</a> = T</h4></section></summary><div class='docblock'>The type of the elements being iterated over.</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.IntoIter\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.IntoIter\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.80.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter\" class=\"associatedtype\">IntoIter</a> = IntoIter&lt;T, N&gt;</h4></section></summary><div class='docblock'>Which kind of iterator are we turning this into?</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/heapless/vec.rs.html#1003\">source</a><a href=\"#method.into_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.0/core/iter/traits/collect/trait.IntoIterator.html#tymethod.into_iter\" class=\"fn\">into_iter</a>(self) -&gt; &lt;<a class=\"struct\" href=\"trussed/types/struct.Vec.html\" title=\"struct trussed::types::Vec\">Vec</a>&lt;T, N&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.80.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter\" title=\"type core::iter::traits::collect::IntoIterator::IntoIter\">IntoIter</a></h4></section></summary><div class='docblock'>Creates an iterator from a value. <a href=\"https://doc.rust-lang.org/1.80.0/core/iter/traits/collect/trait.IntoIterator.html#tymethod.into_iter\">Read more</a></div></details></div></details>","IntoIterator","trussed::key::Material","trussed::key::SerializedKeyBytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Ord-for-Vec%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/heapless/vec.rs.html#1133-1135\">source</a><a href=\"#impl-Ord-for-Vec%3CT,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/core/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a> for <a class=\"struct\" href=\"trussed/types/struct.Vec.html\" title=\"struct trussed::types::Vec\">Vec</a>&lt;T, N&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/heapless/vec.rs.html#1138\">source</a><a href=\"#method.cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.0/core/cmp/trait.Ord.html#tymethod.cmp\" class=\"fn\">cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"trussed/types/struct.Vec.html\" title=\"struct trussed::types::Vec\">Vec</a>&lt;T, N&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.0/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a></h4></section></summary><div class='docblock'>This method returns an <a href=\"https://doc.rust-lang.org/1.80.0/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a> between <code>self</code> and <code>other</code>. <a href=\"https://doc.rust-lang.org/1.80.0/core/cmp/trait.Ord.html#tymethod.cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.max\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#856-858\">source</a></span><a href=\"#method.max\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.0/core/cmp/trait.Ord.html#method.max\" class=\"fn\">max</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Compares and returns the maximum of two values. <a href=\"https://doc.rust-lang.org/1.80.0/core/cmp/trait.Ord.html#method.max\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.min\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#877-879\">source</a></span><a href=\"#method.min\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.0/core/cmp/trait.Ord.html#method.min\" class=\"fn\">min</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Compares and returns the minimum of two values. <a href=\"https://doc.rust-lang.org/1.80.0/core/cmp/trait.Ord.html#method.min\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clamp\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.50.0\">1.50.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#903-906\">source</a></span><a href=\"#method.clamp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.0/core/cmp/trait.Ord.html#method.clamp\" class=\"fn\">clamp</a>(self, min: Self, max: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>,</div></h4></section></summary><div class='docblock'>Restrict a value to a certain interval. <a href=\"https://doc.rust-lang.org/1.80.0/core/cmp/trait.Ord.html#method.clamp\">Read more</a></div></details></div></details>","Ord","trussed::key::Material","trussed::key::SerializedKeyBytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3C%26%5BB%5D%3E-for-Vec%3CA,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/heapless/vec.rs.html#1038-1040\">source</a><a href=\"#impl-PartialEq%3C%26%5BB%5D%3E-for-Vec%3CA,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, B, const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/core/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/core/primitive.slice.html\">[B]</a>&gt; for <a class=\"struct\" href=\"trussed/types/struct.Vec.html\" title=\"struct trussed::types::Vec\">Vec</a>&lt;A, N&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;B&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/heapless/vec.rs.html#1042\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/core/primitive.slice.html\">[B]</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/core/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/core/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/core/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq<&[B]>","trussed::key::Material","trussed::key::SerializedKeyBytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3C%26%5BB;+M%5D%3E-for-Vec%3CA,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/heapless/vec.rs.html#1101-1103\">source</a><a href=\"#impl-PartialEq%3C%26%5BB;+M%5D%3E-for-Vec%3CA,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, B, const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/core/primitive.usize.html\">usize</a>, const M: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/core/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/core/primitive.array.html\">[B; M]</a>&gt; for <a class=\"struct\" href=\"trussed/types/struct.Vec.html\" title=\"struct trussed::types::Vec\">Vec</a>&lt;A, N&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;B&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/heapless/vec.rs.html#1105\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/core/primitive.array.html\">[B; M]</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/core/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/core/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/core/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq<&[B; M]>","trussed::key::Material","trussed::key::SerializedKeyBytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3C%26mut+%5BB%5D%3E-for-Vec%3CA,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/heapless/vec.rs.html#1058-1060\">source</a><a href=\"#impl-PartialEq%3C%26mut+%5BB%5D%3E-for-Vec%3CA,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, B, const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/core/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;&amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/core/primitive.slice.html\">[B]</a>&gt; for <a class=\"struct\" href=\"trussed/types/struct.Vec.html\" title=\"struct trussed::types::Vec\">Vec</a>&lt;A, N&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;B&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/heapless/vec.rs.html#1062\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;&amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/core/primitive.slice.html\">[B]</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/core/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/core/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/core/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq<&mut [B]>","trussed::key::Material","trussed::key::SerializedKeyBytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3C%5BB%5D%3E-for-Vec%3CA,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/heapless/vec.rs.html#1018-1020\">source</a><a href=\"#impl-PartialEq%3C%5BB%5D%3E-for-Vec%3CA,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, B, const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/core/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/core/primitive.slice.html\">[B]</a>&gt; for <a class=\"struct\" href=\"trussed/types/struct.Vec.html\" title=\"struct trussed::types::Vec\">Vec</a>&lt;A, N&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;B&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/heapless/vec.rs.html#1022\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/core/primitive.slice.html\">[B]</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/core/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/core/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/core/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq<[B]>","trussed::key::Material","trussed::key::SerializedKeyBytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3C%5BB;+M%5D%3E-for-Vec%3CA,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/heapless/vec.rs.html#1079-1081\">source</a><a href=\"#impl-PartialEq%3C%5BB;+M%5D%3E-for-Vec%3CA,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, B, const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/core/primitive.usize.html\">usize</a>, const M: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/core/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/core/primitive.array.html\">[B; M]</a>&gt; for <a class=\"struct\" href=\"trussed/types/struct.Vec.html\" title=\"struct trussed::types::Vec\">Vec</a>&lt;A, N&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;B&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/heapless/vec.rs.html#1083\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/core/primitive.array.html\">[B; M]</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/core/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/core/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/core/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq<[B; M]>","trussed::key::Material","trussed::key::SerializedKeyBytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CVec%3CB,+N2%3E%3E-for-Vec%3CA,+N1%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/heapless/vec.rs.html#1008-1010\">source</a><a href=\"#impl-PartialEq%3CVec%3CB,+N2%3E%3E-for-Vec%3CA,+N1%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, B, const N1: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/core/primitive.usize.html\">usize</a>, const N2: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/core/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"struct\" href=\"trussed/types/struct.Vec.html\" title=\"struct trussed::types::Vec\">Vec</a>&lt;B, N2&gt;&gt; for <a class=\"struct\" href=\"trussed/types/struct.Vec.html\" title=\"struct trussed::types::Vec\">Vec</a>&lt;A, N1&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;B&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/heapless/vec.rs.html#1012\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"trussed/types/struct.Vec.html\" title=\"struct trussed::types::Vec\">Vec</a>&lt;B, N2&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/core/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/core/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/core/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq<Vec<B, N2>>","trussed::key::Material","trussed::key::SerializedKeyBytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd%3CVec%3CT,+N2%3E%3E-for-Vec%3CT,+N1%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/heapless/vec.rs.html#1124-1126\">source</a><a href=\"#impl-PartialOrd%3CVec%3CT,+N2%3E%3E-for-Vec%3CT,+N1%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N1: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/core/primitive.usize.html\">usize</a>, const N2: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/core/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>&lt;<a class=\"struct\" href=\"trussed/types/struct.Vec.html\" title=\"struct trussed::types::Vec\">Vec</a>&lt;T, N2&gt;&gt; for <a class=\"struct\" href=\"trussed/types/struct.Vec.html\" title=\"struct trussed::types::Vec\">Vec</a>&lt;T, N1&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/heapless/vec.rs.html#1128\">source</a><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"trussed/types/struct.Vec.html\" title=\"struct trussed::types::Vec\">Vec</a>&lt;T, N2&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.0/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"https://doc.rust-lang.org/1.80.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1180\">source</a></span><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.0/core/cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/core/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/core/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"https://doc.rust-lang.org/1.80.0/core/cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1198\">source</a></span><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.0/core/cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/core/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/core/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;=</code>\noperator. <a href=\"https://doc.rust-lang.org/1.80.0/core/cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1215\">source</a></span><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.0/core/cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/core/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/core/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code> operator. <a href=\"https://doc.rust-lang.org/1.80.0/core/cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1233\">source</a></span><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.0/core/cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/core/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/core/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;=</code>\noperator. <a href=\"https://doc.rust-lang.org/1.80.0/core/cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details>","PartialOrd<Vec<T, N2>>","trussed::key::Material","trussed::key::SerializedKeyBytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Serialize-for-Vec%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/heapless/ser.rs.html#43-45\">source</a><a href=\"#impl-Serialize-for-Vec%3CT,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/core/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"serde/ser/trait.Serialize.html\" title=\"trait serde::ser::Serialize\">Serialize</a> for <a class=\"struct\" href=\"trussed/types/struct.Vec.html\" title=\"struct trussed::types::Vec\">Vec</a>&lt;T, N&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"serde/ser/trait.Serialize.html\" title=\"trait serde::ser::Serialize\">Serialize</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.serialize\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/heapless/ser.rs.html#47-49\">source</a><a href=\"#method.serialize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"serde/ser/trait.Serialize.html#tymethod.serialize\" class=\"fn\">serialize</a>&lt;S&gt;(\n    &amp;self,\n    serializer: S,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&lt;S as <a class=\"trait\" href=\"serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>&gt;::<a class=\"associatedtype\" href=\"serde/ser/trait.Serializer.html#associatedtype.Ok\" title=\"type serde::ser::Serializer::Ok\">Ok</a>, &lt;S as <a class=\"trait\" href=\"serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>&gt;::<a class=\"associatedtype\" href=\"serde/ser/trait.Serializer.html#associatedtype.Error\" title=\"type serde::ser::Serializer::Error\">Error</a>&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>,</div></h4></section></summary><div class='docblock'>Serialize this value into the given Serde serializer. <a href=\"serde/ser/trait.Serialize.html#tymethod.serialize\">Read more</a></div></details></div></details>","Serialize","trussed::key::Material","trussed::key::SerializedKeyBytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3C%26%5BT%5D%3E-for-Vec%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/heapless/vec.rs.html#863\">source</a><a href=\"#impl-TryFrom%3C%26%5BT%5D%3E-for-Vec%3CT,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T, const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/core/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/core/primitive.slice.html\">[T]</a>&gt; for <a class=\"struct\" href=\"trussed/types/struct.Vec.html\" title=\"struct trussed::types::Vec\">Vec</a>&lt;T, N&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.80.0/core/convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/core/primitive.unit.html\">()</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/heapless/vec.rs.html#866\">source</a><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.0/core/convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    slice: &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/core/primitive.slice.html\">[T]</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"trussed/types/struct.Vec.html\" title=\"struct trussed::types::Vec\">Vec</a>&lt;T, N&gt;, &lt;<a class=\"struct\" href=\"trussed/types/struct.Vec.html\" title=\"struct trussed::types::Vec\">Vec</a>&lt;T, N&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/core/primitive.slice.html\">[T]</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.80.0/core/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type core::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Performs the conversion.</div></details></div></details>","TryFrom<&'a [T]>","trussed::key::Material","trussed::key::SerializedKeyBytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Vec%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/heapless/vec.rs.html#46\">source</a><a href=\"#impl-Vec%3CT,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/core/primitive.usize.html\">usize</a>&gt; <a class=\"struct\" href=\"trussed/types/struct.Vec.html\" title=\"struct trussed::types::Vec\">Vec</a>&lt;T, N&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><a class=\"src rightside\" href=\"src/heapless/vec.rs.html#64\">source</a><h4 class=\"code-header\">pub const fn <a href=\"trussed/types/struct.Vec.html#tymethod.new\" class=\"fn\">new</a>() -&gt; <a class=\"struct\" href=\"trussed/types/struct.Vec.html\" title=\"struct trussed::types::Vec\">Vec</a>&lt;T, N&gt;</h4></section></summary><div class=\"docblock\"><p>Constructs a new, empty vector with a fixed capacity of <code>N</code></p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>heapless::Vec;\n\n<span class=\"comment\">// allocate the vector on the stack\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x: Vec&lt;u8, <span class=\"number\">16</span>&gt; = Vec::new();\n\n<span class=\"comment\">// allocate the vector in a static variable\n</span><span class=\"kw\">static </span><span class=\"kw-2\">mut </span>X: Vec&lt;u8, <span class=\"number\">16</span>&gt; = Vec::new();</code></pre></div>\n<p><code>Vec</code> <code>const</code> constructor; wrap the returned value in <a href=\"../struct.Vec.html\"><code>Vec</code></a></p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_slice\" class=\"method\"><a class=\"src rightside\" href=\"src/heapless/vec.rs.html#86-88\">source</a><h4 class=\"code-header\">pub fn <a href=\"trussed/types/struct.Vec.html#tymethod.from_slice\" class=\"fn\">from_slice</a>(other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/core/primitive.slice.html\">[T]</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"trussed/types/struct.Vec.html\" title=\"struct trussed::types::Vec\">Vec</a>&lt;T, N&gt;, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/core/primitive.unit.html\">()</a>&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h4></section></summary><div class=\"docblock\"><p>Constructs a new vector with a fixed capacity of <code>N</code> and fills it\nwith the provided slice.</p>\n<p>This is equivalent to the following code:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>heapless::Vec;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v: Vec&lt;u8, <span class=\"number\">16</span>&gt; = Vec::new();\nv.extend_from_slice(<span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]).unwrap();</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ptr\" class=\"method\"><a class=\"src rightside\" href=\"src/heapless/vec.rs.html#111\">source</a><h4 class=\"code-header\">pub fn <a href=\"trussed/types/struct.Vec.html#tymethod.as_ptr\" class=\"fn\">as_ptr</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/core/primitive.pointer.html\">*const T</a></h4></section></summary><div class=\"docblock\"><p>Returns a raw pointer to the vector’s buffer.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut_ptr\" class=\"method\"><a class=\"src rightside\" href=\"src/heapless/vec.rs.html#116\">source</a><h4 class=\"code-header\">pub fn <a href=\"trussed/types/struct.Vec.html#tymethod.as_mut_ptr\" class=\"fn\">as_mut_ptr</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/core/primitive.pointer.html\">*mut T</a></h4></section></summary><div class=\"docblock\"><p>Returns a raw pointer to the vector’s buffer, which may be mutated through.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_slice\" class=\"method\"><a class=\"src rightside\" href=\"src/heapless/vec.rs.html#131\">source</a><h4 class=\"code-header\">pub fn <a href=\"trussed/types/struct.Vec.html#tymethod.as_slice\" class=\"fn\">as_slice</a>(&amp;self) -&gt; &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/core/primitive.slice.html\">[T]</a></h4></section></summary><div class=\"docblock\"><p>Extracts a slice containing the entire vector.</p>\n<p>Equivalent to <code>&amp;s[..]</code>.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>heapless::Vec;\n<span class=\"kw\">let </span>buffer: Vec&lt;u8, <span class=\"number\">5</span>&gt; = Vec::from_slice(<span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>]).unwrap();\n<span class=\"macro\">assert_eq!</span>(buffer.as_slice(), <span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>]);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_array\" class=\"method\"><a class=\"src rightside\" href=\"src/heapless/vec.rs.html#148\">source</a><h4 class=\"code-header\">pub fn <a href=\"trussed/types/struct.Vec.html#tymethod.into_array\" class=\"fn\">into_array</a>&lt;const M: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/core/primitive.usize.html\">usize</a>&gt;(self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/core/primitive.array.html\">[T; M]</a>, <a class=\"struct\" href=\"trussed/types/struct.Vec.html\" title=\"struct trussed::types::Vec\">Vec</a>&lt;T, N&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the contents of the vector as an array of length <code>M</code> if the length\nof the vector is exactly <code>M</code>, otherwise returns <code>Err(self)</code>.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>heapless::Vec;\n<span class=\"kw\">let </span>buffer: Vec&lt;u8, <span class=\"number\">42</span>&gt; = Vec::from_slice(<span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>]).unwrap();\n<span class=\"kw\">let </span>array: [u8; <span class=\"number\">5</span>] = buffer.into_array().unwrap();\n<span class=\"macro\">assert_eq!</span>(array, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>]);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.capacity\" class=\"method\"><a class=\"src rightside\" href=\"src/heapless/vec.rs.html#182\">source</a><h4 class=\"code-header\">pub const fn <a href=\"trussed/types/struct.Vec.html#tymethod.capacity\" class=\"fn\">capacity</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/core/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Returns the maximum number of elements the vector can hold.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clear\" class=\"method\"><a class=\"src rightside\" href=\"src/heapless/vec.rs.html#187\">source</a><h4 class=\"code-header\">pub fn <a href=\"trussed/types/struct.Vec.html#tymethod.clear\" class=\"fn\">clear</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Clears the vector, removing all values.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend\" class=\"method\"><a class=\"src rightside\" href=\"src/heapless/vec.rs.html#196-198\">source</a><h4 class=\"code-header\">pub fn <a href=\"trussed/types/struct.Vec.html#tymethod.extend\" class=\"fn\">extend</a>&lt;I&gt;(&amp;mut self, iter: I)<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = T&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Extends the vec from an iterator.</p>\n<h5 id=\"panic\"><a class=\"doc-anchor\" href=\"#panic\">§</a>Panic</h5>\n<p>Panics if the vec cannot hold all elements of the iterator.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_from_slice\" class=\"method\"><a class=\"src rightside\" href=\"src/heapless/vec.rs.html#220-222\">source</a><h4 class=\"code-header\">pub fn <a href=\"trussed/types/struct.Vec.html#tymethod.extend_from_slice\" class=\"fn\">extend_from_slice</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/core/primitive.slice.html\">[T]</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/core/primitive.unit.html\">()</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/core/primitive.unit.html\">()</a>&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h4></section></summary><div class=\"docblock\"><p>Clones and appends all elements in a slice to the <code>Vec</code>.</p>\n<p>Iterates over the slice <code>other</code>, clones each element, and then appends\nit to this <code>Vec</code>. The <code>other</code> vector is traversed in-order.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>heapless::Vec;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = Vec::&lt;u8, <span class=\"number\">8</span>&gt;::new();\nvec.push(<span class=\"number\">1</span>).unwrap();\nvec.extend_from_slice(<span class=\"kw-2\">&amp;</span>[<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]).unwrap();\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>vec, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.pop\" class=\"method\"><a class=\"src rightside\" href=\"src/heapless/vec.rs.html#238\">source</a><h4 class=\"code-header\">pub fn <a href=\"trussed/types/struct.Vec.html#tymethod.pop\" class=\"fn\">pop</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Removes the last element from a vector and returns it, or <code>None</code> if it’s empty</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.push\" class=\"method\"><a class=\"src rightside\" href=\"src/heapless/vec.rs.html#249\">source</a><h4 class=\"code-header\">pub fn <a href=\"trussed/types/struct.Vec.html#tymethod.push\" class=\"fn\">push</a>(&amp;mut self, item: T) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/core/primitive.unit.html\">()</a>, T&gt;</h4></section></summary><div class=\"docblock\"><p>Appends an <code>item</code> to the back of the collection</p>\n<p>Returns back the <code>item</code> if the vector is full</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.pop_unchecked\" class=\"method\"><a class=\"src rightside\" href=\"src/heapless/vec.rs.html#263\">source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"trussed/types/struct.Vec.html#tymethod.pop_unchecked\" class=\"fn\">pop_unchecked</a>(&amp;mut self) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Removes the last element from a vector and returns it</p>\n<h5 id=\"safety\"><a class=\"doc-anchor\" href=\"#safety\">§</a>Safety</h5>\n<p>This assumes the vec to have at least one element.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.push_unchecked\" class=\"method\"><a class=\"src rightside\" href=\"src/heapless/vec.rs.html#275\">source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"trussed/types/struct.Vec.html#tymethod.push_unchecked\" class=\"fn\">push_unchecked</a>(&amp;mut self, item: T)</h4></section></summary><div class=\"docblock\"><p>Appends an <code>item</code> to the back of the collection</p>\n<h5 id=\"safety-1\"><a class=\"doc-anchor\" href=\"#safety-1\">§</a>Safety</h5>\n<p>This assumes the vec is not full.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.truncate\" class=\"method\"><a class=\"src rightside\" href=\"src/heapless/vec.rs.html#286\">source</a><h4 class=\"code-header\">pub fn <a href=\"trussed/types/struct.Vec.html#tymethod.truncate\" class=\"fn\">truncate</a>(&amp;mut self, len: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/core/primitive.usize.html\">usize</a>)</h4></section></summary><div class=\"docblock\"><p>Shortens the vector, keeping the first <code>len</code> elements and dropping the rest.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.resize\" class=\"method\"><a class=\"src rightside\" href=\"src/heapless/vec.rs.html#315-317\">source</a><h4 class=\"code-header\">pub fn <a href=\"trussed/types/struct.Vec.html#tymethod.resize\" class=\"fn\">resize</a>(&amp;mut self, new_len: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/core/primitive.usize.html\">usize</a>, value: T) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/core/primitive.unit.html\">()</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/core/primitive.unit.html\">()</a>&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h4></section></summary><div class=\"docblock\"><p>Resizes the Vec in-place so that len is equal to new_len.</p>\n<p>If new_len is greater than len, the Vec is extended by the\ndifference, with each additional slot filled with value. If\nnew_len is less than len, the Vec is simply truncated.</p>\n<p>See also <a href=\"struct.Vec.html#method.resize_default\"><code>resize_default</code></a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.resize_default\" class=\"method\"><a class=\"src rightside\" href=\"src/heapless/vec.rs.html#341-343\">source</a><h4 class=\"code-header\">pub fn <a href=\"trussed/types/struct.Vec.html#tymethod.resize_default\" class=\"fn\">resize_default</a>(&amp;mut self, new_len: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/core/primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/core/primitive.unit.html\">()</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/core/primitive.unit.html\">()</a>&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a>,</div></h4></section></summary><div class=\"docblock\"><p>Resizes the <code>Vec</code> in-place so that <code>len</code> is equal to <code>new_len</code>.</p>\n<p>If <code>new_len</code> is greater than <code>len</code>, the <code>Vec</code> is extended by the\ndifference, with each additional slot filled with <code>Default::default()</code>.\nIf <code>new_len</code> is less than <code>len</code>, the <code>Vec</code> is simply truncated.</p>\n<p>See also <a href=\"struct.Vec.html#method.resize\"><code>resize</code></a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.set_len\" class=\"method\"><a class=\"src rightside\" href=\"src/heapless/vec.rs.html#437\">source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"trussed/types/struct.Vec.html#tymethod.set_len\" class=\"fn\">set_len</a>(&amp;mut self, new_len: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/core/primitive.usize.html\">usize</a>)</h4></section></summary><div class=\"docblock\"><p>Forces the length of the vector to <code>new_len</code>.</p>\n<p>This is a low-level operation that maintains none of the normal\ninvariants of the type. Normally changing the length of a vector\nis done using one of the safe operations instead, such as\n<a href=\"#method.truncate\"><code>truncate</code></a>, <a href=\"#method.resize\"><code>resize</code></a>, <a href=\"https://doc.rust-lang.org/stable/core/iter/trait.Extend.html#tymethod.extend\"><code>extend</code></a>, or <a href=\"#method.clear\"><code>clear</code></a>.</p>\n<h5 id=\"safety-2\"><a class=\"doc-anchor\" href=\"#safety-2\">§</a>Safety</h5>\n<ul>\n<li><code>new_len</code> must be less than or equal to <a href=\"#method.capacity\"><code>capacity()</code></a>.</li>\n<li>The elements at <code>old_len..new_len</code> must be initialized.</li>\n</ul>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">§</a>Examples</h5>\n<p>This method can be useful for situations in which the vector\nis serving as a buffer for other code, particularly over FFI:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>heapless::Vec;\n\n<span class=\"kw\">pub fn </span>get_dictionary(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; <span class=\"prelude-ty\">Option</span>&lt;Vec&lt;u8, <span class=\"number\">32768</span>&gt;&gt; {\n    <span class=\"comment\">// Per the FFI method's docs, \"32768 bytes is always enough\".\n    </span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>dict = Vec::new();\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>dict_length = <span class=\"number\">0</span>;\n    <span class=\"comment\">// SAFETY: When `deflateGetDictionary` returns `Z_OK`, it holds that:\n    // 1. `dict_length` elements were initialized.\n    // 2. `dict_length` &lt;= the capacity (32_768)\n    // which makes `set_len` safe to call.\n    </span><span class=\"kw\">unsafe </span>{\n        <span class=\"comment\">// Make the FFI call...\n        </span><span class=\"kw\">let </span>r = deflateGetDictionary(<span class=\"self\">self</span>.strm, dict.as_mut_ptr(), <span class=\"kw-2\">&amp;mut </span>dict_length);\n        <span class=\"kw\">if </span>r == Z_OK {\n            <span class=\"comment\">// ...and update the length to what was initialized.\n            </span>dict.set_len(dict_length);\n            <span class=\"prelude-val\">Some</span>(dict)\n        } <span class=\"kw\">else </span>{\n            <span class=\"prelude-val\">None\n        </span>}\n    }\n}</code></pre></div>\n<p>While the following example is sound, there is a memory leak since\nthe inner vectors were not freed prior to the <code>set_len</code> call:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>core::iter::FromIterator;\n<span class=\"kw\">use </span>heapless::Vec;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = Vec::&lt;Vec&lt;u8, <span class=\"number\">3</span>&gt;, <span class=\"number\">3</span>&gt;::from_iter(\n    [\n        Vec::from_iter([<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>].iter().cloned()),\n        Vec::from_iter([<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>].iter().cloned()),\n        Vec::from_iter([<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>].iter().cloned()),\n    ]\n    .iter()\n    .cloned()\n);\n<span class=\"comment\">// SAFETY:\n// 1. `old_len..0` is empty so no elements need to be initialized.\n// 2. `0 &lt;= capacity` always holds whatever `capacity` is.\n</span><span class=\"kw\">unsafe </span>{\n    vec.set_len(<span class=\"number\">0</span>);\n}</code></pre></div>\n<p>Normally, here, one would use <a href=\"#method.clear\"><code>clear</code></a> instead to correctly drop\nthe contents and thus not leak memory.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.swap_remove\" class=\"method\"><a class=\"src rightside\" href=\"src/heapless/vec.rs.html#471\">source</a><h4 class=\"code-header\">pub fn <a href=\"trussed/types/struct.Vec.html#tymethod.swap_remove\" class=\"fn\">swap_remove</a>(&amp;mut self, index: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/core/primitive.usize.html\">usize</a>) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Removes an element from the vector and returns it.</p>\n<p>The removed element is replaced by the last element of the vector.</p>\n<p>This does not preserve ordering, but is O(1).</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>index</code> is out of bounds.</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>heapless::Vec;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v: Vec&lt;<span class=\"kw\">_</span>, <span class=\"number\">8</span>&gt; = Vec::new();\nv.push(<span class=\"string\">\"foo\"</span>).unwrap();\nv.push(<span class=\"string\">\"bar\"</span>).unwrap();\nv.push(<span class=\"string\">\"baz\"</span>).unwrap();\nv.push(<span class=\"string\">\"qux\"</span>).unwrap();\n\n<span class=\"macro\">assert_eq!</span>(v.swap_remove(<span class=\"number\">1</span>), <span class=\"string\">\"bar\"</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">&amp;*</span>v, [<span class=\"string\">\"foo\"</span>, <span class=\"string\">\"qux\"</span>, <span class=\"string\">\"baz\"</span>]);\n\n<span class=\"macro\">assert_eq!</span>(v.swap_remove(<span class=\"number\">0</span>), <span class=\"string\">\"foo\"</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">&amp;*</span>v, [<span class=\"string\">\"baz\"</span>, <span class=\"string\">\"qux\"</span>]);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.swap_remove_unchecked\" class=\"method\"><a class=\"src rightside\" href=\"src/heapless/vec.rs.html#503\">source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"trussed/types/struct.Vec.html#tymethod.swap_remove_unchecked\" class=\"fn\">swap_remove_unchecked</a>(&amp;mut self, index: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/core/primitive.usize.html\">usize</a>) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Removes an element from the vector and returns it.</p>\n<p>The removed element is replaced by the last element of the vector.</p>\n<p>This does not preserve ordering, but is O(1).</p>\n<h5 id=\"safety-3\"><a class=\"doc-anchor\" href=\"#safety-3\">§</a>Safety</h5>\n<p>Assumes <code>index</code> within bounds.</p>\n<h5 id=\"examples-6\"><a class=\"doc-anchor\" href=\"#examples-6\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>heapless::Vec;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v: Vec&lt;<span class=\"kw\">_</span>, <span class=\"number\">8</span>&gt; = Vec::new();\nv.push(<span class=\"string\">\"foo\"</span>).unwrap();\nv.push(<span class=\"string\">\"bar\"</span>).unwrap();\nv.push(<span class=\"string\">\"baz\"</span>).unwrap();\nv.push(<span class=\"string\">\"qux\"</span>).unwrap();\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw\">unsafe </span>{ v.swap_remove_unchecked(<span class=\"number\">1</span>) }, <span class=\"string\">\"bar\"</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">&amp;*</span>v, [<span class=\"string\">\"foo\"</span>, <span class=\"string\">\"qux\"</span>, <span class=\"string\">\"baz\"</span>]);\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw\">unsafe </span>{ v.swap_remove_unchecked(<span class=\"number\">0</span>) }, <span class=\"string\">\"foo\"</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">&amp;*</span>v, [<span class=\"string\">\"baz\"</span>, <span class=\"string\">\"qux\"</span>]);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_full\" class=\"method\"><a class=\"src rightside\" href=\"src/heapless/vec.rs.html#515\">source</a><h4 class=\"code-header\">pub fn <a href=\"trussed/types/struct.Vec.html#tymethod.is_full\" class=\"fn\">is_full</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/core/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns true if the vec is full</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_empty\" class=\"method\"><a class=\"src rightside\" href=\"src/heapless/vec.rs.html#521\">source</a><h4 class=\"code-header\">pub fn <a href=\"trussed/types/struct.Vec.html#tymethod.is_empty\" class=\"fn\">is_empty</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/core/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns true if the vec is empty</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.starts_with\" class=\"method\"><a class=\"src rightside\" href=\"src/heapless/vec.rs.html#540-542\">source</a><h4 class=\"code-header\">pub fn <a href=\"trussed/types/struct.Vec.html#tymethod.starts_with\" class=\"fn\">starts_with</a>(&amp;self, needle: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/core/primitive.slice.html\">[T]</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/core/primitive.bool.html\">bool</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>,</div></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if <code>needle</code> is a prefix of the Vec.</p>\n<p>Always returns <code>true</code> if <code>needle</code> is an empty slice.</p>\n<h5 id=\"examples-7\"><a class=\"doc-anchor\" href=\"#examples-7\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>heapless::Vec;\n\n<span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw\">_</span>, <span class=\"number\">8</span>&gt; = Vec::from_slice(<span class=\"string\">b\"abc\"</span>).unwrap();\n<span class=\"macro\">assert_eq!</span>(v.starts_with(<span class=\"string\">b\"\"</span>), <span class=\"bool-val\">true</span>);\n<span class=\"macro\">assert_eq!</span>(v.starts_with(<span class=\"string\">b\"ab\"</span>), <span class=\"bool-val\">true</span>);\n<span class=\"macro\">assert_eq!</span>(v.starts_with(<span class=\"string\">b\"bc\"</span>), <span class=\"bool-val\">false</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ends_with\" class=\"method\"><a class=\"src rightside\" href=\"src/heapless/vec.rs.html#563-565\">source</a><h4 class=\"code-header\">pub fn <a href=\"trussed/types/struct.Vec.html#tymethod.ends_with\" class=\"fn\">ends_with</a>(&amp;self, needle: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/core/primitive.slice.html\">[T]</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/core/primitive.bool.html\">bool</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>,</div></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if <code>needle</code> is a suffix of the Vec.</p>\n<p>Always returns <code>true</code> if <code>needle</code> is an empty slice.</p>\n<h5 id=\"examples-8\"><a class=\"doc-anchor\" href=\"#examples-8\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>heapless::Vec;\n\n<span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw\">_</span>, <span class=\"number\">8</span>&gt; = Vec::from_slice(<span class=\"string\">b\"abc\"</span>).unwrap();\n<span class=\"macro\">assert_eq!</span>(v.ends_with(<span class=\"string\">b\"\"</span>), <span class=\"bool-val\">true</span>);\n<span class=\"macro\">assert_eq!</span>(v.ends_with(<span class=\"string\">b\"ab\"</span>), <span class=\"bool-val\">false</span>);\n<span class=\"macro\">assert_eq!</span>(v.ends_with(<span class=\"string\">b\"bc\"</span>), <span class=\"bool-val\">true</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.insert\" class=\"method\"><a class=\"src rightside\" href=\"src/heapless/vec.rs.html#591\">source</a><h4 class=\"code-header\">pub fn <a href=\"trussed/types/struct.Vec.html#tymethod.insert\" class=\"fn\">insert</a>(&amp;mut self, index: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/core/primitive.usize.html\">usize</a>, element: T) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/core/primitive.unit.html\">()</a>, T&gt;</h4></section></summary><div class=\"docblock\"><p>Inserts an element at position <code>index</code> within the vector, shifting all\nelements after it to the right.</p>\n<p>Returns back the <code>element</code> if the vector is full.</p>\n<h5 id=\"panics-1\"><a class=\"doc-anchor\" href=\"#panics-1\">§</a>Panics</h5>\n<p>Panics if <code>index &gt; len</code>.</p>\n<h5 id=\"examples-9\"><a class=\"doc-anchor\" href=\"#examples-9\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>heapless::Vec;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec: Vec&lt;<span class=\"kw\">_</span>, <span class=\"number\">8</span>&gt; = Vec::from_slice(<span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]).unwrap();\nvec.insert(<span class=\"number\">1</span>, <span class=\"number\">4</span>);\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\nvec.insert(<span class=\"number\">4</span>, <span class=\"number\">5</span>);\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>]);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.remove\" class=\"method\"><a class=\"src rightside\" href=\"src/heapless/vec.rs.html#648\">source</a><h4 class=\"code-header\">pub fn <a href=\"trussed/types/struct.Vec.html#tymethod.remove\" class=\"fn\">remove</a>(&amp;mut self, index: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/core/primitive.usize.html\">usize</a>) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Removes and returns the element at position <code>index</code> within the vector,\nshifting all elements after it to the left.</p>\n<p>Note: Because this shifts over the remaining elements, it has a\nworst-case performance of <em>O</em>(<em>n</em>). If you don’t need the order of\nelements to be preserved, use <a href=\"trussed/types/struct.Vec.html#method.swap_remove\" title=\"method trussed::types::Vec::swap_remove\"><code>swap_remove</code></a> instead. If you’d like to\nremove elements from the beginning of the <code>Vec</code>, consider using\n<a href=\"heapless/deque/struct.Deque.html#method.pop_front\" title=\"method heapless::deque::Deque::pop_front\"><code>Deque::pop_front</code></a> instead.</p>\n<h5 id=\"panics-2\"><a class=\"doc-anchor\" href=\"#panics-2\">§</a>Panics</h5>\n<p>Panics if <code>index</code> is out of bounds.</p>\n<h5 id=\"examples-10\"><a class=\"doc-anchor\" href=\"#examples-10\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>heapless::Vec;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v: Vec&lt;<span class=\"kw\">_</span>, <span class=\"number\">8</span>&gt; = Vec::from_slice(<span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]).unwrap();\n<span class=\"macro\">assert_eq!</span>(v.remove(<span class=\"number\">1</span>), <span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"number\">1</span>, <span class=\"number\">3</span>]);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.retain\" class=\"method\"><a class=\"src rightside\" href=\"src/heapless/vec.rs.html#699-701\">source</a><h4 class=\"code-header\">pub fn <a href=\"trussed/types/struct.Vec.html#tymethod.retain\" class=\"fn\">retain</a>&lt;F&gt;(&amp;mut self, f: F)<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/core/primitive.reference.html\">&amp;T</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/core/primitive.bool.html\">bool</a>,</div></h4></section></summary><div class=\"docblock\"><p>Retains only the elements specified by the predicate.</p>\n<p>In other words, remove all elements <code>e</code> for which <code>f(&amp;e)</code> returns <code>false</code>.\nThis method operates in place, visiting each element exactly once in the\noriginal order, and preserves the order of the retained elements.</p>\n<h5 id=\"examples-11\"><a class=\"doc-anchor\" href=\"#examples-11\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>heapless::Vec;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec: Vec&lt;<span class=\"kw\">_</span>, <span class=\"number\">8</span>&gt; = Vec::from_slice(<span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]).unwrap();\nvec.retain(|<span class=\"kw-2\">&amp;</span>x| x % <span class=\"number\">2 </span>== <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">2</span>, <span class=\"number\">4</span>]);</code></pre></div>\n<p>Because the elements are visited exactly once in the original order,\nexternal state may be used to decide which elements to keep.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>heapless::Vec;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec: Vec&lt;<span class=\"kw\">_</span>, <span class=\"number\">8</span>&gt; = Vec::from_slice(<span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]).unwrap();\n<span class=\"kw\">let </span>keep = [<span class=\"bool-val\">false</span>, <span class=\"bool-val\">true</span>, <span class=\"bool-val\">true</span>, <span class=\"bool-val\">false</span>, <span class=\"bool-val\">true</span>];\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>iter = keep.iter();\nvec.retain(|<span class=\"kw\">_</span>| <span class=\"kw-2\">*</span>iter.next().unwrap());\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>]);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.retain_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/heapless/vec.rs.html#726-728\">source</a><h4 class=\"code-header\">pub fn <a href=\"trussed/types/struct.Vec.html#tymethod.retain_mut\" class=\"fn\">retain_mut</a>&lt;F&gt;(&amp;mut self, f: F)<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/core/primitive.reference.html\">&amp;mut T</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/core/primitive.bool.html\">bool</a>,</div></h4></section></summary><div class=\"docblock\"><p>Retains only the elements specified by the predicate, passing a mutable reference to it.</p>\n<p>In other words, remove all elements <code>e</code> such that <code>f(&amp;mut e)</code> returns <code>false</code>.\nThis method operates in place, visiting each element exactly once in the\noriginal order, and preserves the order of the retained elements.</p>\n<h5 id=\"examples-12\"><a class=\"doc-anchor\" href=\"#examples-12\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>heapless::Vec;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec: Vec&lt;<span class=\"kw\">_</span>, <span class=\"number\">8</span>&gt; = Vec::from_slice(<span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]).unwrap();\nvec.retain_mut(|x| <span class=\"kw\">if </span><span class=\"kw-2\">*</span>x &lt;= <span class=\"number\">3 </span>{\n    <span class=\"kw-2\">*</span>x += <span class=\"number\">1</span>;\n    <span class=\"bool-val\">true\n</span>} <span class=\"kw\">else </span>{\n    <span class=\"bool-val\">false\n</span>});\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]);</code></pre></div>\n</div></details></div></details>",0,"trussed::key::Material","trussed::key::SerializedKeyBytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Write-for-Vec%3Cu8,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/heapless/vec.rs.html#845\">source</a><a href=\"#impl-Write-for-Vec%3Cu8,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/core/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/fmt/trait.Write.html\" title=\"trait core::fmt::Write\">Write</a> for <a class=\"struct\" href=\"trussed/types/struct.Vec.html\" title=\"struct trussed::types::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/core/primitive.u8.html\">u8</a>, N&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_str\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/heapless/vec.rs.html#846\">source</a><a href=\"#method.write_str\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.0/core/fmt/trait.Write.html#tymethod.write_str\" class=\"fn\">write_str</a>(&amp;mut self, s: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/core/primitive.str.html\">str</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/core/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Writes a string slice into this writer, returning whether the write\nsucceeded. <a href=\"https://doc.rust-lang.org/1.80.0/core/fmt/trait.Write.html#tymethod.write_str\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_char\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.1.0\">1.1.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/fmt/mod.rs.html#178\">source</a></span><a href=\"#method.write_char\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.0/core/fmt/trait.Write.html#method.write_char\" class=\"fn\">write_char</a>(&amp;mut self, c: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/core/primitive.char.html\">char</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/core/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Writes a <a href=\"https://doc.rust-lang.org/1.80.0/core/primitive.char.html\" title=\"primitive char\"><code>char</code></a> into this writer, returning whether the write succeeded. <a href=\"https://doc.rust-lang.org/1.80.0/core/fmt/trait.Write.html#method.write_char\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_fmt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/fmt/mod.rs.html#206\">source</a></span><a href=\"#method.write_fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.0/core/fmt/trait.Write.html#method.write_fmt\" class=\"fn\">write_fmt</a>(&amp;mut self, args: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/core/fmt/struct.Arguments.html\" title=\"struct core::fmt::Arguments\">Arguments</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/core/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Glue for usage of the <a href=\"https://doc.rust-lang.org/1.80.0/core/macro.write.html\" title=\"macro core::write\"><code>write!</code></a> macro with implementors of this trait. <a href=\"https://doc.rust-lang.org/1.80.0/core/fmt/trait.Write.html#method.write_fmt\">Read more</a></div></details></div></details>","Write","trussed::key::Material","trussed::key::SerializedKeyBytes"],["<section id=\"impl-Eq-for-Vec%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/heapless/vec.rs.html#1122\">source</a><a href=\"#impl-Eq-for-Vec%3CT,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/core/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> for <a class=\"struct\" href=\"trussed/types/struct.Vec.html\" title=\"struct trussed::types::Vec\">Vec</a>&lt;T, N&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a>,</div></h3></section>","Eq","trussed::key::Material","trussed::key::SerializedKeyBytes"]]
};if (window.register_type_impls) {window.register_type_impls(type_impls);} else {window.pending_type_impls = type_impls;}})()